{
  "openapi": "3.0.0",
  "paths": {
    "/api/healthz/timeoutTest": {
      "post": {
        "operationId": "AppController_timeoutTest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timeout": {
                    "type": "number",
                    "example": 30,
                    "description": "Timeout in seconds"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timeout test success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Timeout 30s, test success"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Timeout test",
        "tags": [
          "Test Tools"
        ]
      }
    },
    "/api/v1/user/profile": {
      "get": {
        "operationId": "UserController_profile",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDTO"
                }
              }
            }
          }
        },
        "summary": "Get user profile",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/user/web3-wallet": {
      "get": {
        "description": "Get user web3 wallet info, including total balance, ip total market cap, ip license incomes, etc...",
        "operationId": "UserController_walletDetail",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mint",
            "required": false,
            "in": "query",
            "description": "mint address of token to query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWalletDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user web3 wallet info",
        "tags": [
          "User",
          "User Wallet"
        ]
      }
    },
    "/api/v1/user/update": {
      "post": {
        "description": "update username and description",
        "operationId": "UserController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileReqDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update user profile",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/user/follow": {
      "post": {
        "description": "follow a user",
        "operationId": "UserController_follow",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFollowDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Follow a user",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/user/unfollow": {
      "post": {
        "description": "unfollow a user",
        "operationId": "UserController_unfollow",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUnFollowDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Unfollow a user",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/user/uploadAvatar": {
      "post": {
        "description": "update user's avatar, you need use form-data to upload the avatar",
        "operationId": "UserController_updateAvatar",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "multipart/form-data",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "form-data",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "avatar"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update user's avatar",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/user/token-rewards": {
      "get": {
        "description": "Get user token rewards",
        "operationId": "UserController_getTokenRewards",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "The token to query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTokenRewardsListDto"
                }
              }
            }
          }
        },
        "summary": "Get user token rewards",
        "tags": [
          "User",
          "User Wallet"
        ]
      }
    },
    "/api/v1/user/claim-rewards": {
      "post": {
        "description": "Claim rewards",
        "operationId": "UserController_claimRewards",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimRewardsDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTokenRewardsListDto"
                }
              }
            }
          }
        },
        "summary": "Claim rewards",
        "tags": [
          "User Wallet"
        ]
      }
    },
    "/api/v1/user/claim-rewards-history": {
      "get": {
        "description": "Get claim rewards history",
        "operationId": "UserController_claimRewardsHistory",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "Token address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimRewardsHistoryListDto"
                }
              }
            }
          }
        },
        "summary": "Get claim rewards history",
        "tags": [
          "User Wallet"
        ]
      }
    },
    "/api/v1/user/invitations": {
      "get": {
        "description": "Get invitations",
        "operationId": "UserController_getInvitations",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "query",
            "description": "Invitation code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationsDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get invitations",
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/user/invite-code": {
      "get": {
        "description": "Get invite code",
        "operationId": "UserController_getInviteCode",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInviteCodeDto"
                }
              }
            }
          }
        },
        "summary": "Get invite code",
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/auth/loginWithCode": {
      "post": {
        "operationId": "AuthController_loginWithCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginWithCodeReqDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          }
        },
        "summary": "Login with code",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/web3/giggle/get-ip-token-list": {
      "get": {
        "operationId": "GiggleController_getIpTokenList",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site",
            "required": false,
            "in": "query",
            "description": "site of the ip token, '' to get all ip tokens",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mint",
            "required": false,
            "in": "query",
            "description": "mint address of the ip token, use comma to split",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addr",
            "required": false,
            "in": "query",
            "description": "user wallet address of the ip token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIpTokenListResponseDto"
                }
              }
            }
          }
        },
        "summary": "Query IP tokens",
        "tags": [
          "Giggle",
          "IP Tokens"
        ]
      }
    },
    "/api/v1/web3/giggle/trade": {
      "post": {
        "operationId": "GiggleController_trade",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Trade IP Token",
        "tags": [
          "Giggle",
          "User Wallet"
        ]
      }
    },
    "/api/v1/web3/price/percentage-to-credits/{percentage}": {
      "get": {
        "description": "Convert a percentage to the need usdcs and expect purchased giggle tokens when launch ip token, percentage must be between 1 and 98",
        "operationId": "PriceController_getPercentageToCredits",
        "parameters": [
          {
            "name": "percentage",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The price of the ip token when create ip token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PercentageToCreditsDTO"
                }
              }
            }
          }
        },
        "summary": "Percentage to price",
        "tags": [
          "IP Tokens"
        ]
      }
    },
    "/api/v1/launch-agent/create": {
      "post": {
        "operationId": "LaunchAgentController_createAgent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLaunchAgentResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a new launch agent",
        "tags": [
          "Launch Agent"
        ]
      }
    },
    "/api/v1/launch-agent/generate-strategy": {
      "post": {
        "operationId": "LaunchAgentController_generateStrategy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParseLaunchLaunchPlanRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParseLaunchLaunchPlanResponseDto"
                }
              }
            }
          }
        },
        "summary": "Generate a new launch agent strategy",
        "tags": [
          "Launch Agent"
        ]
      }
    },
    "/api/v1/launch-agent/generate-agent-wallets": {
      "post": {
        "operationId": "LaunchAgentController_generateAgentWallets",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateLaunchAgentWalletsRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateLaunchAgentWalletsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Generate a new launch agent wallets",
        "tags": [
          "Launch Agent"
        ]
      }
    },
    "/api/v1/launch-agent/check-agent-wallets": {
      "post": {
        "operationId": "LaunchAgentController_checkAgentWallets",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckAgentWalletsStatusRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAgentWalletsStatusResponseDto"
                }
              }
            }
          }
        },
        "summary": "Check the status of a launch agent wallets",
        "tags": [
          "Launch Agent"
        ]
      }
    },
    "/api/v1/launch-agent/check-agent-status/{ip_id}": {
      "get": {
        "operationId": "LaunchAgentController_checkAgentStatus",
        "parameters": [
          {
            "name": "ip_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Check the status of a launch agent",
        "tags": [
          "Launch Agent"
        ]
      }
    },
    "/api/v1/launch-agent/get-permission": {
      "get": {
        "operationId": "LaunchAgentController_getPermission",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allowed": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get the permission of a user to use launch agent",
        "tags": [
          "Launch Agent"
        ]
      }
    },
    "/api/v1/launch-agent/suggest-bonding-segments": {
      "post": {
        "operationId": "LaunchAgentController_suggestBondingSegments",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestBondingSegmentsRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestBondingSegmentsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Suggest bonding segments",
        "tags": [
          "Launch Agent"
        ]
      }
    },
    "/api/v1/nft/mint": {
      "post": {
        "description": "Mint a nft from an asset, you must use our asset service to upload the asset first, this api will create a task id, you can use the task id to retrieve the nft minting status",
        "operationId": "NftController_mint",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintNftReqDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NftDetailResDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mint a nft from an asset",
        "tags": [
          "Nfts"
        ]
      }
    },
    "/api/v1/nft/my": {
      "get": {
        "description": "Retrieve users nfts list",
        "operationId": "NftController_getMyNfts",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mint",
            "required": false,
            "in": "query",
            "description": "The nft address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "task_id",
            "required": false,
            "in": "query",
            "description": "The task id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "The email of the user, this is required when requester is developer",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "The status of the nft",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyNftListResDto"
                }
              }
            }
          }
        },
        "summary": "Retrieve users nfts",
        "tags": [
          "Nfts"
        ]
      }
    },
    "/api/v1/assets": {
      "get": {
        "operationId": "AssetsController_getAssets",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "query",
            "description": "type of the asset, all, video, image",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsListResDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve all assets",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/{id}": {
      "get": {
        "operationId": "AssetsController_getAsset",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "asset id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve an asset detail",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/rename": {
      "post": {
        "operationId": "AssetsController_renameAsset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetRenameReqDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Rename an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/get-presigned-url": {
      "post": {
        "description": "Retrieve a presigned url for asset upload, you need use PUT method to upload the asset via returned url",
        "operationId": "AssetsController_uploadToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPresignedUploadUrlReqDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPresignedUploadUrlResDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retrieve a presigned url",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/register": {
      "post": {
        "description": "Register a s3 key to asset after asset was uploaded",
        "operationId": "AssetsController_registerAsset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterAssetDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Register an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/delete": {
      "post": {
        "operationId": "AssetsController_deleteAsset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/order/list": {
      "get": {
        "description": "List of orders, if requester is developer, it will return all orders depends your permission, if requester is user, it will return all orders of specific user",
        "operationId": "OrderController_getOrderList",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "The status of the order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "List of orders",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/detail": {
      "get": {
        "operationId": "OrderController_getOrder",
        "parameters": [
          {
            "name": "order_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get an order by order id",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/create": {
      "post": {
        "operationId": "OrderController_createOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Create an order",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/preview": {
      "post": {
        "description": "Preview an order, you can use this api to preview the order detail before you create an order, such as the estimated rewards, the order detail, etc.",
        "operationId": "OrderController_previewOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewOrderDto"
                }
              }
            }
          }
        },
        "summary": "Preview an order",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/release-rewards": {
      "post": {
        "description": "Release rewards for an order, after the released, order can not be refunded",
        "operationId": "OrderController_releaseRewardsByUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseRewardsDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderRewardsDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Release rewards for an order",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/bind-reward-pool": {
      "post": {
        "operationId": "OrderController_bindRewardPoolByUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindRewardPoolDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Bind a reward pool to an order",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/resend-callback": {
      "post": {
        "operationId": "OrderController_resendCallbackByUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendCallbackRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCallbackDto"
                }
              }
            }
          }
        },
        "summary": "Resend callback for an order",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/pay-with-credit": {
      "post": {
        "operationId": "OrderController_payOrderWithCredit",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Create an order and pay with credit",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/wallet-quick-pay": {
      "post": {
        "operationId": "OrderController_payOrderWithWallet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Create an order and pay with wallet",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/refund": {
      "post": {
        "description": "Refund an order, only support completed order(not rewards released) and paid time is not more than 10 days, currently we only support refund with credit",
        "operationId": "OrderController_refundOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundOrderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Refund an order",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/rewards-detail": {
      "get": {
        "operationId": "OrderController_getRewardsDetail",
        "parameters": [
          {
            "name": "order_id",
            "required": false,
            "in": "query",
            "description": "The order id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statement_id",
            "required": false,
            "in": "query",
            "description": "The statement id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderRewardsDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get rewards detail for an order",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/admin-resend-callback": {
      "post": {
        "operationId": "OrderController_resendCallback",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendCallbackRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Resend callback for an order",
        "tags": [
          "Order Management"
        ]
      }
    },
    "/api/v1/order/admin-bind-reward-pool": {
      "post": {
        "operationId": "OrderController_bindRewardPool",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindRewardPoolDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Bind a reward pool to an order",
        "tags": [
          "Order Management"
        ]
      }
    },
    "/api/v1/order/admin-unbind-reward-pool": {
      "post": {
        "operationId": "OrderController_unbindRewardPool",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbindRewardPoolDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Unbind a reward pool from an order",
        "tags": [
          "Order Management"
        ]
      }
    },
    "/api/v1/order/admin-release-rewards": {
      "post": {
        "operationId": "OrderController_releaseRewards",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseRewardsDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Release rewards for an order",
        "tags": [
          "Order Management"
        ]
      }
    },
    "/api/v1/rewards-pool/create": {
      "post": {
        "description": "Create a rewards pool for a token",
        "operationId": "RewardsPoolController_createPool",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRewardsPoolDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoolResponseDto"
                }
              }
            }
          }
        },
        "summary": "Create a rewards pool",
        "tags": [
          "Rewards Pool Management"
        ]
      }
    },
    "/api/v1/rewards-pool/update": {
      "post": {
        "description": "Update a rewards pool",
        "operationId": "RewardsPoolController_updatePool",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRewardsPoolDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoolResponseDto"
                }
              }
            }
          }
        },
        "summary": "Update a rewards pool",
        "tags": [
          "Rewards Pool Management"
        ]
      }
    },
    "/api/v1/rewards-pool/inject-tokens": {
      "post": {
        "description": "Inject tokens to a rewards pool",
        "operationId": "RewardsPoolController_injectTokens",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InjectTokensDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoolResponseDto"
                }
              }
            }
          }
        },
        "summary": "Inject tokens to a rewards pool",
        "tags": [
          "Rewards Pool Management"
        ]
      }
    },
    "/api/v1/rewards-pool/airdrop": {
      "post": {
        "description": "Airdrop tokens to an user",
        "operationId": "RewardsPoolController_airdrop",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestAirdropDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AirdropResponseDto"
                }
              }
            }
          }
        },
        "summary": "Airdrop tokens to an user",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/rewards-pool/airdrops": {
      "get": {
        "description": "Get airdrop statements",
        "operationId": "RewardsPoolController_getAirdropStatements",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "token address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "email of the user to be airdropped",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "type of airdrop",
            "schema": {
              "enum": [
                "invite",
                "interact",
                "other"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AirdropResponseListDto"
                }
              }
            }
          }
        },
        "summary": "Get airdrop statements",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/rewards-pool": {
      "get": {
        "description": "Get all rewards pools",
        "operationId": "RewardsPoolController_getPools",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "required": false,
            "in": "query",
            "description": "Filter by owner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "Filter by token address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app_id",
            "required": false,
            "in": "query",
            "description": "Available pools for specific app",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PoolsResponseListDto"
                }
              }
            }
          }
        },
        "summary": "Get all rewards pools",
        "tags": [
          "Rewards Pool Management"
        ]
      }
    },
    "/api/v1/rewards-pool/statistics/summary": {
      "get": {
        "description": "Get statistics summary",
        "operationId": "RewardsPoolController_getStatisticsSummary",
        "parameters": [
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "token address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsSummaryDto"
                }
              }
            }
          }
        },
        "summary": "Get statistics summary",
        "tags": [
          "Rewards Pool Management"
        ]
      }
    },
    "/api/v1/rewards-pool/statistics/incomes": {
      "get": {
        "description": "Get statistics incomes",
        "operationId": "RewardsPoolController_getStatisticsIncomes",
        "parameters": [
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "token address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatisticsIncomesDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get statistics incomes",
        "tags": [
          "Rewards Pool Management"
        ]
      }
    },
    "/api/v1/rewards-pool/statements": {
      "get": {
        "description": "Get statements",
        "operationId": "RewardsPoolController_getStatement",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": false,
            "in": "query",
            "description": "token address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "description": "start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "description": "end date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widget_tag",
            "required": false,
            "in": "query",
            "description": "widget tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "only_settled",
            "required": false,
            "in": "query",
            "description": "only return settled statements(on chain tx confirmed) ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatementResponseListDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get statements",
        "tags": [
          "Rewards Pool Management"
        ]
      }
    },
    "/api/v1/credit/top-up": {
      "post": {
        "operationId": "CreditController_topUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopUpDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Create a top up credit order",
        "tags": [
          "Credit"
        ]
      }
    },
    "/api/v1/credit/statement": {
      "get": {
        "operationId": "CreditController_getStatements",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "filter by type",
            "schema": {
              "enum": [
                "top_up",
                "consume",
                "refund"
              ],
              "type": "string"
            }
          },
          {
            "name": "widget_tag",
            "required": false,
            "in": "query",
            "description": "filter by widget tag of the order created by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStatementsResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get credit statements",
        "tags": [
          "Credit"
        ]
      }
    },
    "/api/v1/sales-agent/incomes": {
      "get": {
        "operationId": "SalesAgentController_getSalesAgentIncomes",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widget_tag",
            "required": false,
            "in": "query",
            "description": "filter by widget tag",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "description": "start date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "description": "end date",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesAgentIncomeResDto"
                }
              }
            }
          }
        },
        "summary": "Get sales agent incomes",
        "tags": [
          "Sales Agent"
        ]
      }
    },
    "/api/v1/sales-agent/create": {
      "post": {
        "operationId": "SalesAgentController_addSalesAgent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSalesAgentDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesAgentDetailDto"
                }
              }
            }
          }
        },
        "summary": "Add a sales agent",
        "tags": [
          "Sales Agent"
        ]
      }
    },
    "/api/v1/sales-agent": {
      "get": {
        "operationId": "SalesAgentController_getSalesAgentDetail",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesAgentDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get a sales agent detail",
        "tags": [
          "Sales Agent"
        ]
      }
    },
    "/api/v1/app/list": {
      "get": {
        "operationId": "OpenAppController_getAppList",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get app list",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/info": {
      "get": {
        "operationId": "OpenAppController_getAppInfo",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "description": "App ID, please contact us to get the app id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "required": false,
            "in": "header",
            "description": "JWT Authorization, if set,this field is using to verify if user is admin of the app",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfoDto"
                }
              }
            }
          }
        },
        "summary": "Get portal info",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/approve-creator": {
      "post": {
        "description": "Approves a creator application, enables IP creation permissions, and sends a confirmation email",
        "operationId": "OpenAppController_approveCreator",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveCreatorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creator approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApproveCreatorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve a creator application",
        "tags": [
          "App Management"
        ]
      }
    },
    "/api/v1/app/info/{appId}": {
      "get": {
        "description": "Get portal info by app id",
        "operationId": "OpenAppController_getAppInfoByAppId",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "required": false,
            "in": "header",
            "description": "JWT Auth orization, if set,this field is using to verify if user is admin of the app",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfoDto"
                }
              }
            }
          }
        },
        "summary": "Get portal info by app id",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/add-invite-email": {
      "post": {
        "operationId": "OpenAppController_addInviteEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddInviteEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invite email added successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add invite email",
        "tags": [
          "App Management"
        ]
      }
    },
    "/api/v1/app/remove-invite-email": {
      "post": {
        "operationId": "OpenAppController_removeInviteEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveInviteEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invite email removed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove invite email",
        "tags": [
          "App Management"
        ]
      }
    },
    "/api/v1/app/auth/login": {
      "post": {
        "description": "this api is used to request login app",
        "operationId": "AuthController_login",
        "parameters": [
          {
            "name": "origin",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "request login app",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/app/auth/check-login-token": {
      "post": {
        "description": "this api is used to check login token",
        "operationId": "AuthController_checkToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckTokenDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckTokenResponseDto"
                }
              }
            }
          }
        },
        "summary": "check login token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/app/auth/get-bind-code": {
      "post": {
        "description": "this api is used to get bind code",
        "operationId": "AuthController_getBindCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBindCodeDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBindCodeResponseDto"
                }
              }
            }
          }
        },
        "summary": "get bind code",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/app/auth/confirm-bind-code": {
      "post": {
        "description": "this api is used to confirm binding an external app",
        "operationId": "AuthController_confirmBindApp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmBindDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmBindResponseDto"
                }
              }
            }
          }
        },
        "summary": "confirm bind app",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/developer/widgets/create": {
      "post": {
        "operationId": "DeveloperController_createWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperWidgetCreateDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDetailDto"
                }
              }
            }
          }
        },
        "summary": "create a widget",
        "tags": [
          "Widgets Management"
        ]
      }
    },
    "/api/v1/developer/widgets/update": {
      "post": {
        "operationId": "DeveloperController_updateWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperWidgetUpdateDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDetailDto"
                }
              }
            }
          }
        },
        "summary": "update a widget",
        "tags": [
          "Widgets Management"
        ]
      }
    },
    "/api/v1/developer/widgets/delete": {
      "post": {
        "operationId": "DeveloperController_deleteWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperWidgetDeleteDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperWidgetDeleteResponseDto"
                }
              }
            }
          }
        },
        "summary": "delete a widget",
        "tags": [
          "Widgets Management"
        ]
      }
    },
    "/api/v1/developer/widgets/identity": {
      "get": {
        "operationId": "DeveloperController_identifyWidget",
        "parameters": [
          {
            "name": "tag",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetIdentityDto"
                }
              }
            }
          }
        },
        "summary": "get identity for a widget",
        "tags": [
          "Widgets Management"
        ]
      }
    },
    "/api/v1/developer/widgets/get-access-token": {
      "post": {
        "description": "get access token for a widget, default expire in 10 minites",
        "operationId": "DeveloperController_getAccessToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestWidgetAccessTokenDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetAccessTokenDto"
                }
              }
            }
          }
        },
        "summary": "get access token for a widget",
        "tags": [
          "Developer Utility"
        ]
      }
    },
    "/api/v1/developer/get-nation-codes": {
      "get": {
        "operationId": "DeveloperController_getNationCodes",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NationCodeDto"
                }
              }
            }
          }
        },
        "summary": "get nation codes",
        "tags": [
          "Widgets Management",
          "Developer Utility"
        ]
      }
    },
    "/api/v1/developer/widgets": {
      "get": {
        "operationId": "DeveloperController_getWidgets",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDetailDto"
                }
              }
            }
          }
        },
        "summary": "get all widgets",
        "tags": [
          "Widgets Management"
        ]
      }
    },
    "/api/v1/developer/widgets/{tag}": {
      "get": {
        "operationId": "DeveloperController_getConfigs",
        "parameters": [
          {
            "name": "tag",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDetailDto"
                }
              }
            }
          }
        },
        "summary": "get configs for a widget",
        "tags": [
          "Widgets Management"
        ]
      }
    },
    "/api/v1/developer/user-info": {
      "get": {
        "operationId": "DeveloperController_getUserInfo",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "query",
            "description": "The email of the user",
            "schema": {
              "example": "test@giggle.pro",
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "required": true,
            "in": "query",
            "description": "The user id of the user",
            "schema": {
              "example": "1234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get user info",
        "tags": [
          "Widgets Management",
          "Developer Utility"
        ]
      }
    },
    "/api/v1/developer/get-user-token": {
      "post": {
        "operationId": "DeveloperController_getUserToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetUserTokenDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ],
        "summary": "get user token",
        "tags": [
          "Widgets Management",
          "Developer Utility"
        ]
      }
    },
    "/api/v1/link/create": {
      "post": {
        "description": "Create a short link you can share to anywhere, default is to a portal page.\n        The link redirect url is depends users token, if token is from a widget, the link will be to the widget in portal, you can specify the widget message when widget loaded.\n        ",
        "operationId": "LinkController_createLink",
        "parameters": [
          {
            "name": "app-id",
            "required": false,
            "in": "header",
            "description": "The app id of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLinkResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a short link to share.",
        "tags": [
          "Link"
        ]
      }
    },
    "/api/v1/link/bind-device": {
      "post": {
        "operationId": "LinkController_bindDevice",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindDeviceRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Bind a device to a link.",
        "tags": [
          "Link Management"
        ]
      }
    },
    "/api/v1/link/{uniqueStr}": {
      "get": {
        "operationId": "LinkController_getLink",
        "parameters": [
          {
            "name": "uniqueStr",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get a link by unique string.",
        "tags": [
          "Link"
        ]
      }
    },
    "/api/v1/link/my/statistics": {
      "get": {
        "operationId": "LinkController_getMyLinkStatistics",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLinkStatisticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get my link statistics.",
        "tags": [
          "Link"
        ]
      }
    },
    "/api/v1/ip-library": {
      "get": {
        "operationId": "IpLibraryController_get",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "tag of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "category of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "required": false,
            "in": "query",
            "description": "genre of the ip library, you can pass multiple genres by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "sort order, default sort field is created_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_field",
            "required": false,
            "in": "query",
            "description": "sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "required": false,
            "in": "query",
            "description": "owner of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "email of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "launched_to_giggle",
            "required": false,
            "in": "query",
            "description": "is launched to giggle",
            "schema": {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          },
          {
            "name": "is_top",
            "required": false,
            "in": "query",
            "description": "is top",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_level",
            "required": false,
            "in": "query",
            "description": "ip level",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "children_levels",
            "required": false,
            "in": "query",
            "description": "children levels",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token_mint",
            "required": false,
            "in": "query",
            "description": "token mint address of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_type",
            "required": false,
            "in": "query",
            "description": "ip type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app-id",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryListDto"
                }
              }
            }
          }
        },
        "summary": "Get list of ip libraries",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/ip-name-check": {
      "post": {
        "operationId": "IpLibraryController_ipNameCheck",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpNameCheckDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "summary": "Check if ip name is available",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/my": {
      "get": {
        "operationId": "IpLibraryController_getMy",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "tag of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "category of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "required": false,
            "in": "query",
            "description": "genre of the ip library, you can pass multiple genres by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "sort order, default sort field is created_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_field",
            "required": false,
            "in": "query",
            "description": "sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "required": false,
            "in": "query",
            "description": "owner of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "email of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "launched_to_giggle",
            "required": false,
            "in": "query",
            "description": "is launched to giggle",
            "schema": {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          },
          {
            "name": "is_top",
            "required": false,
            "in": "query",
            "description": "is top",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_level",
            "required": false,
            "in": "query",
            "description": "ip level",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "children_levels",
            "required": false,
            "in": "query",
            "description": "children levels",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token_mint",
            "required": false,
            "in": "query",
            "description": "token mint address of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_type",
            "required": false,
            "in": "query",
            "description": "ip type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_public",
            "required": false,
            "in": "query",
            "description": "is public",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get my ip libraries",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/genres": {
      "get": {
        "operationId": "IpLibraryController_getGenres",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenreDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get video genres",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/add-share-count": {
      "post": {
        "operationId": "IpLibraryController_addShareCount",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddShareCountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add share count to an ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/like": {
      "post": {
        "operationId": "IpLibraryController_likeIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Like an ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/unlike": {
      "post": {
        "operationId": "IpLibraryController_unlikeIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlikeIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Unlike an ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/available-parent-ips": {
      "get": {
        "operationId": "IpLibraryController_getAvailableParentIps",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableParentIpsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get available parent ips",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/my/{id}": {
      "get": {
        "operationId": "IpLibraryController_getMyDetail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detail of ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/set-visibility": {
      "post": {
        "operationId": "IpLibraryController_setIpVisibility",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetVisibilityDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Set visibility of ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/untokenize": {
      "post": {
        "operationId": "IpLibraryController_untokenize",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UntokenizeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Untokenize an ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/create-ip": {
      "post": {
        "description": "create a new ip but do not launch ip token",
        "operationId": "IpLibraryController_createIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/update-ip": {
      "post": {
        "description": "update an ip, only un-launch ip can be updated",
        "operationId": "IpLibraryController_editIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an ip",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/launch-ip-token": {
      "post": {
        "description": "\nReturns SSE stream with progress updates and final result, \nsse event: \n\n**event list:**\n\n- ip.creation_steps\n\n ```json\n{\n  \"order\": 1,\n  \"event\": \"ip.creation_steps\",\n  \"label\": \"Creation steps\",\n  \"summary\": \"When started a creation process, this event will return the creation steps in `data` structure.\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.data_validating\n\n ```json\n{\n  \"order\": 2,\n  \"event\": \"ip.data_validating\",\n  \"label\": \"Data verification\",\n  \"summary\": \"Validating IP creation data.\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.asset_to_ipfs\n\n ```json\n{\n  \"order\": 3,\n  \"event\": \"ip.asset_to_ipfs\",\n  \"label\": \"Asset to IPFS\",\n  \"summary\": \"Uploading IP asset to IPFS, at current step, the data in `data` is the progress of asset uploading\",\n  \"is_progress\": true,\n  \"is_completed\": false\n}\n```\n- ip.token_creating\n\n ```json\n{\n  \"order\": 14,\n  \"event\": \"ip.token_creating\",\n  \"label\": \"Creating IP Token\",\n  \"summary\": \"Creating IP token, this may take a while depends on the network condition\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.token_creating_reward_pool\n\n ```json\n{\n  \"order\": 15,\n  \"event\": \"ip.token_creating_reward_pool\",\n  \"label\": \"Creating Reward Pool\",\n  \"summary\": \"Creating reward pool for IP token.\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.start_launch_agent.starting\n\n ```json\n{\n  \"order\": 116,\n  \"event\": \"ip.start_launch_agent.starting\",\n  \"label\": \"IP Token Run Strategy\",\n  \"summary\": \"Starting to run strategy for IP token if your purchase strategy is `agent`\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.start_launch_agent.calculate_cost\n\n ```json\n{\n  \"order\": 118,\n  \"event\": \"ip.start_launch_agent.calculate_cost\",\n  \"label\": \"Calculate Cost for Purchase Strategy\",\n  \"summary\": \"Calculating cost for purchase strategy, if your strategy is `agent`\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.start_launch_agent.check_balance\n\n ```json\n{\n  \"order\": 119,\n  \"event\": \"ip.start_launch_agent.check_balance\",\n  \"label\": \"Check Balance for Purchase Strategy\",\n  \"summary\": \"Checking balance for IP strategy, if your strategy is `agent`\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.start_launch_agent.swap_sol\n\n ```json\n{\n  \"order\": 120,\n  \"event\": \"ip.start_launch_agent.swap_sol\",\n  \"label\": \"Swap SOL for Purchase Strategy\",\n  \"summary\": \"Swapping SOL for IP strategy, if your strategy is `agent`\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.start_launch_agent.transfer_sol\n\n ```json\n{\n  \"order\": 121,\n  \"event\": \"ip.start_launch_agent.transfer_sol\",\n  \"label\": \"Transfer SOL for Purchase Strategy\",\n  \"summary\": \"Transferring SOL for IP strategy, if your strategy is `agent`\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.start_launch_agent.transfer_usdc\n\n ```json\n{\n  \"order\": 122,\n  \"event\": \"ip.start_launch_agent.transfer_usdc\",\n  \"label\": \"Transfer USDC for Purchase Strategy\",\n  \"summary\": \"Transferring USDC for IP strategy, if your strategy is `agent`\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.start_launch_agent.start_agent\n\n ```json\n{\n  \"order\": 123,\n  \"event\": \"ip.start_launch_agent.start_agent\",\n  \"label\": \"Start Purchase Strategy Agent\",\n  \"summary\": \"Starting purchase strategy, if your strategy is `agent`\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n- ip.start_launch_agent.agent_started\n\n ```json\n{\n  \"order\": 124,\n  \"event\": \"ip.start_launch_agent.agent_started\",\n  \"label\": \"Purchase Strategy Agent Started\",\n  \"summary\": \"Purchase strategy agent started, if your strategy is `agent`\",\n  \"is_progress\": false,\n  \"is_completed\": true\n}\n```\n- ip.token_created_on_chain\n\n ```json\n{\n  \"order\": 1007,\n  \"event\": \"ip.token_created_on_chain\",\n  \"label\": \"IP Token Created On Chain\",\n  \"summary\": \"IP token is created successfully, this event will be triggered when the IP token is created successfully, and the data in `data` is the IP info.\",\n  \"is_progress\": false,\n  \"is_completed\": true\n}\n```\n- ip.warning\n\n ```json\n{\n  \"order\": 1008,\n  \"event\": \"ip.warning\",\n  \"label\": \"IP Warning\",\n  \"summary\": \"IP warning, `data` is the warning info.\",\n  \"is_progress\": false,\n  \"is_completed\": false\n}\n```\n\n**error event:**\n\nif error occurs, the event will be `error` and the data in `data` is the error message, sse will be closed.\n",
        "operationId": "IpLibraryController_launchIpToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchIpTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Launch ip token",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/remove-ip": {
      "post": {
        "operationId": "IpLibraryController_removeIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveIpResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove an ip",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/{id}": {
      "get": {
        "operationId": "IpLibraryController_getDetail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get detail of ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/delegate-ip-token": {
      "post": {
        "operationId": "IpLibraryController_delegateIpToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateIpTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delegate an ip token to a market maker",
        "tags": [
          "IP Library",
          "Market Maker"
        ]
      }
    },
    "/api/v1/ip/announcement": {
      "post": {
        "operationId": "AnnouncementController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnouncementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create an announcement",
        "tags": [
          "Announcement"
        ]
      },
      "get": {
        "operationId": "AnnouncementController_listAnnouncements",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app_id",
            "required": false,
            "in": "query",
            "description": "App id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementListDto"
                }
              }
            }
          }
        },
        "summary": "Get announcement list",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/announcement/detail/{id}": {
      "get": {
        "operationId": "AnnouncementController_detail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get announcement detail",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/announcement/{ipId}": {
      "get": {
        "operationId": "AnnouncementController_listIpAnnouncements",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app_id",
            "required": false,
            "in": "query",
            "description": "App id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementListDto"
                }
              }
            }
          }
        },
        "summary": "Get announcement list by ip",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/announcement/update": {
      "post": {
        "operationId": "AnnouncementController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnouncementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an announcement",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/announcement/delete": {
      "post": {
        "operationId": "AnnouncementController_delete",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAnnouncementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAnnouncementResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an announcement",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/comments": {
      "get": {
        "operationId": "CommentsController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "List comments by IP",
        "tags": [
          "Comments"
        ]
      },
      "post": {
        "operationId": "CommentsController_create",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Create a new comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/comments/{id}": {
      "get": {
        "operationId": "CommentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get one comment by ID",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/comments/delete": {
      "post": {
        "operationId": "CommentsController_remove",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Delete a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/comments/like": {
      "post": {
        "operationId": "CommentsController_likeComment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Like a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/comments/unlike": {
      "post": {
        "operationId": "CommentsController_unlikeComment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlikeCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Unlike a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/order/create-ip-order": {
      "post": {
        "operationId": "IpOrderController_createIpOrder",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpOrderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Create an ip order",
        "tags": [
          "IP Order"
        ]
      }
    },
    "/api/v1/ip/order": {
      "get": {
        "operationId": "IpOrderController_getIpOrderList",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIpOrderListDto"
                }
              }
            }
          }
        },
        "summary": "Get ip order list",
        "tags": [
          "IP Order"
        ]
      }
    },
    "/api/v1/ip/order/ranks": {
      "get": {
        "description": "Get ip creation ranks, default is top 30",
        "operationId": "IpOrderController_getOrderRanks",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRanksResponseDto"
                }
              }
            }
          }
        },
        "summary": "Get ip creation ranks",
        "tags": [
          "IP Order"
        ]
      }
    },
    "/api/v1/ip/order/{order_id}": {
      "get": {
        "operationId": "IpOrderController_checkIpOrder",
        "parameters": [
          {
            "name": "order_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIpOrderDto"
                }
              }
            }
          }
        },
        "summary": "Check ip order",
        "tags": [
          "IP Order"
        ]
      }
    },
    "/api/v1/ip-library/blueprint/generate": {
      "post": {
        "operationId": "BlueprintController_generateBlueprint",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateBlueprintDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlueprintResponseDto"
                }
              }
            }
          }
        },
        "summary": "Generate blueprint for an ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/market-maker/info": {
      "get": {
        "operationId": "MarketMakerController_getInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get market maker info",
        "tags": [
          "MarketMaker",
          "Market Maker Management"
        ]
      }
    },
    "/api/v1/market-maker/ip-delegation": {
      "get": {
        "operationId": "MarketMakerController_getIpDelegation",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get ip delegation list",
        "tags": [
          "MarketMaker",
          "Market Maker Management"
        ]
      }
    },
    "/api/v1/market-maker/cancel-delegation": {
      "post": {
        "operationId": "MarketMakerController_createIpDelegation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelIpDelegationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel an ip token launch delegation",
        "tags": [
          "MarketMaker",
          "Market Maker Management"
        ]
      }
    },
    "/api/v1/market-maker/market-maker-list": {
      "get": {
        "operationId": "MarketMakerController_getMarketMakerList",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMarketMakerResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get market maker list",
        "tags": [
          "MarketMaker",
          "Market Maker"
        ]
      }
    },
    "/api/v1/market-maker/list": {
      "get": {
        "operationId": "MarketMakerController_listMarketMaker",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMarketMakerResponseByAdminDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get market maker list by admin",
        "tags": [
          "MarketMaker",
          "Market Maker Management"
        ]
      }
    },
    "/api/v1/market-maker/create": {
      "post": {
        "operationId": "MarketMakerController_apply",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMarketMakerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create market maker",
        "tags": [
          "MarketMaker",
          "Market Maker Management"
        ]
      }
    },
    "/api/v1/market-maker/delete": {
      "post": {
        "operationId": "MarketMakerController_delete",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMarketMakerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete market maker",
        "tags": [
          "MarketMaker"
        ]
      }
    },
    "/api/v1/market-maker/launch-ip-token": {
      "post": {
        "description": "\nReturns SSE stream with progress updates and final result, same as /launch-ip-token\n",
        "operationId": "MarketMakerController_launchIpToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchIpTokenByMarketMakerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Launch ip token",
        "tags": [
          "MarketMaker"
        ]
      }
    },
    "/api/v1/app/widgets": {
      "get": {
        "operationId": "WidgetsController_getWidgets",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "required": false,
            "in": "query",
            "description": "include tags, use comma to separate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude",
            "required": false,
            "in": "query",
            "description": "exclude tags, use comma to separate",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "type",
            "schema": {
              "enum": [
                "iframe",
                "system"
              ],
              "type": "string"
            }
          },
          {
            "name": "ip_id",
            "required": false,
            "in": "query",
            "description": "ip id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetListResponseDto"
                }
              }
            }
          }
        },
        "summary": "get all widgets",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/{tag}": {
      "get": {
        "operationId": "WidgetsController_getWidgetByTag",
        "parameters": [
          {
            "name": "tag",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "get a widget by tag",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/dashboard/my-summary": {
      "get": {
        "operationId": "DashboardController_getMySummary",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/v1/dashboard/market-ranks": {
      "get": {
        "operationId": "DashboardController_getMarketRanks",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/v1/dashboard/ip-incomes": {
      "get": {
        "operationId": "DashboardController_getIpIncomes",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/api/v1/dashboard/statistic-by-day": {
      "get": {
        "operationId": "DashboardController_getStatisticByDay",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Dashboard"
        ]
      }
    }
  },
  "info": {
    "title": "Giggle.Pro Developer API Reference",
    "description": "\n# Introduction\n\nThe Giggle API provides essential services for digital identity and financial management for widget developers and all personal users to create their own IP libraries:\n\n- **IP Management**: IP library management, including creation, retrieval, and interaction with IP data\n- **Account Management**: User login, profile management, and activity tracking, following/unfollowing other users\n- **Wallet Functions**: Secure digital wallet management, balance query, and send/receive tokens\n- **Payment Processing(coming soon)**: Support user wallet payment with secure transaction handling\n\n---\n\n# Authentication\n\nMost protected endpoints require a valid JWT token in the Authorization header. \nPublic endpoints can be accessed without authentication. Each endpoint in the documentation is clearly marked to indicate whether authentication is required. To obtain a JWT token for accessing protected endpoints, please refer to our authentication widget documentation at [Widget Authentication](https://docs.giggle.pro/widget-development/authentication-and-security). The widget provides a streamlined authentication flow that handles token generation, refresh, and secure storage for your application.\n\n---\n\n# Response Format\n\nMost responses are in JSON format, the main schema is as follows:\n\n```json\n{\n    \"code\": 200,\n    \"msg\": \"some message\",\n    \"data\": {}\n}\n ```\n\n---\n\n# Error Response\n\nIf request fails, api will will return http error code and the error response in the following format:\n\n```json\n{\n    \"code\": 400,\n    \"msg\": \"this is an error message\",\n    \"data\": {}\n}\n ```\n\nerror codes examples:\n\n- 400: Bad Request\n- 401: Unauthorized\n- 403: Forbidden\n- 404: Not Found\n- 500: Internal Server Error\n\n---\n\n# Event Stream Response\n\nSome endpoints return event stream response (SSE),   the response will be in the following format:\n\n```json\n{\n    \"event\": \"some event\",\n    \"data\": {}\n}\n```\n\nThis approach is particularly used for long-running operations such as IP creation, token publishing, and other time-intensive processes that require real-time progress updates to the client.\n\nTo see how to process the event stream response, please refer to the [Event Stream](https://docs.giggle.pro/widget-development/event-stream-response) documentation.\n\n---\n",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.giggle.pro",
      "description": "Production Environment"
    },
    {
      "url": "https://app.ggltest.com",
      "description": "Test Environment"
    },
    {
      "url": "https://api-dev.ggltest.com",
      "description": "Development Environment"
    },
    {
      "url": "https://app.local.giggle.pro",
      "description": "Local Environment"
    },
    {
      "url": "https://app.ggltest.com",
      "description": "Development Environment"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "in": "header",
        "name": "Authorization",
        "description": "JWT Authorization"
      }
    },
    "schemas": {
      "LinkCreatorDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the creator"
          },
          "avatar": {
            "type": "string",
            "description": "The avatar of the creator"
          },
          "email": {
            "type": "string",
            "description": "The email of the creator"
          }
        },
        "required": [
          "username",
          "avatar",
          "email"
        ]
      },
      "LinkSummaryDto": {
        "type": "object",
        "properties": {
          "short_link": {
            "type": "string",
            "description": "short link"
          },
          "link_pic": {
            "type": "string",
            "description": "The og-picture url of the link"
          },
          "creator": {
            "description": "The creator of the link",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkCreatorDto"
              }
            ]
          }
        },
        "required": [
          "short_link",
          "link_pic",
          "creator"
        ]
      },
      "RegisterInfoDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the register info",
            "enum": [
              "direct",
              "widget",
              "other"
            ]
          },
          "source_link_summary": {
            "description": "The source link summary of the register info",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkSummaryDto"
              }
            ]
          },
          "source_link": {
            "type": "string",
            "description": "The source link of the register info"
          },
          "app_id": {
            "type": "string",
            "description": "The app id of the register info"
          },
          "from_widget_tag": {
            "type": "string",
            "description": "The widget tag of the register info"
          }
        },
        "required": [
          "type",
          "source_link_summary",
          "source_link",
          "app_id",
          "from_widget_tag"
        ]
      },
      "UserInfoDTO": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "usernameShorted": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "avatar": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "followers": {
            "type": "number"
          },
          "following": {
            "type": "number"
          },
          "app_id": {
            "type": "string"
          },
          "can_create_ip": {
            "type": "boolean"
          },
          "wallet_address": {
            "type": "string"
          },
          "is_developer": {
            "type": "boolean"
          },
          "is_sale_agent": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "device_id": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "phone_national": {
            "type": "string"
          },
          "current_credit_balance": {
            "type": "number"
          },
          "widget_info": {
            "type": "object"
          },
          "register_info": {
            "$ref": "#/components/schemas/RegisterInfoDTO"
          }
        },
        "required": [
          "user_id",
          "usernameShorted",
          "email",
          "emailConfirmed",
          "avatar",
          "username",
          "description",
          "followers",
          "following",
          "app_id",
          "can_create_ip",
          "wallet_address",
          "is_developer",
          "is_sale_agent",
          "permissions",
          "device_id",
          "phone_number",
          "phone_national",
          "current_credit_balance",
          "widget_info",
          "register_info"
        ]
      },
      "WalletCoinSummaryDto": {
        "type": "object",
        "properties": {
          "holding_num": {
            "type": "number",
            "description": "holding number"
          },
          "formated_holding_num": {
            "type": "string",
            "description": "formated holding number"
          },
          "holding_amount": {
            "type": "number",
            "description": "holding amount"
          },
          "formated_holding_amount": {
            "type": "string",
            "description": "formated holding amount"
          },
          "price": {
            "type": "number",
            "description": "price"
          },
          "formated_price": {
            "type": "string",
            "description": "formated price"
          },
          "symbol": {
            "type": "string",
            "description": "symbol"
          },
          "name": {
            "type": "string",
            "description": "name"
          },
          "mint": {
            "type": "string",
            "description": "mint"
          },
          "cover_url": {
            "type": "string",
            "description": "cover image url"
          },
          "change5m": {
            "type": "string",
            "description": "5m change of the ip token"
          },
          "change1h": {
            "type": "string",
            "description": "1h change of the ip token"
          },
          "change24h": {
            "type": "string",
            "description": "24h change of the ip token"
          }
        },
        "required": [
          "holding_num",
          "formated_holding_num",
          "holding_amount",
          "formated_holding_amount",
          "price",
          "formated_price",
          "symbol",
          "name",
          "mint",
          "cover_url",
          "change5m",
          "change1h",
          "change24h"
        ]
      },
      "UserWalletDetailDto": {
        "type": "object",
        "properties": {
          "addr": {
            "type": "string",
            "description": "user wallet address"
          },
          "total_balance": {
            "type": "number",
            "description": "total balance"
          },
          "formated_total_balance": {
            "type": "string",
            "description": "formated total balance"
          },
          "ip_total_market_cap": {
            "type": "number",
            "description": "ip total market cap"
          },
          "formated_market_cap": {
            "type": "string",
            "description": "formated market cap"
          },
          "list": {
            "description": "list of ip tokens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletCoinSummaryDto"
            }
          },
          "page": {
            "type": "number",
            "description": "page"
          },
          "page_size": {
            "type": "number",
            "description": "page size"
          },
          "ip_license_incomes": {
            "type": "number",
            "description": "ip income"
          },
          "total_balance_change_24h": {
            "type": "number",
            "description": "total balance change 24h"
          }
        },
        "required": [
          "addr",
          "total_balance",
          "formated_total_balance",
          "ip_total_market_cap",
          "formated_market_cap",
          "list",
          "page",
          "page_size",
          "ip_license_incomes",
          "total_balance_change_24h"
        ]
      },
      "UpdateProfileReqDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "description"
        ]
      },
      "UserFollowDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "user of the user to follow"
          }
        },
        "required": [
          "user"
        ]
      },
      "UserUnFollowDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "user of the user to follow"
          }
        },
        "required": [
          "user"
        ]
      },
      "CreateIpTokenGiggleResponseDto": {
        "type": "object",
        "properties": {
          "user_address": {
            "type": "string",
            "description": "user address on chain"
          },
          "mint": {
            "type": "string",
            "description": "token mint address"
          },
          "bonding_curve": {
            "type": "string",
            "description": "bonding curve address"
          },
          "bonding_curve_progress": {
            "type": "number",
            "description": "bonding curve progress"
          },
          "name": {
            "type": "string",
            "description": "name of the ip token"
          },
          "symbol": {
            "type": "string",
            "description": "symbol of the ip token"
          },
          "price": {
            "type": "string",
            "description": "current price of the ip token"
          },
          "market_cap": {
            "type": "string",
            "description": "market cap of the ip token"
          },
          "circulating_supply": {
            "type": "string",
            "description": "circulating supply of the ip token"
          },
          "total_supply": {
            "type": "string",
            "description": "total supply of the ip token"
          },
          "cover_url": {
            "type": "string",
            "description": "cover url of the ip token"
          },
          "file_url": {
            "type": "string",
            "description": "file url of the ip token"
          },
          "twitter": {
            "type": "string",
            "description": "twitter of the ip token"
          },
          "telegram": {
            "type": "string",
            "description": "telegram of the ip token"
          },
          "website": {
            "type": "string",
            "description": "website of the ip token"
          },
          "visitLink": {
            "type": "string",
            "description": "visit link of the ip token"
          },
          "status": {
            "type": "string",
            "description": "status of the ip token"
          },
          "signature": {
            "type": "string",
            "description": "signature of the ip token"
          },
          "description": {
            "type": "string",
            "description": "description of the ip token"
          },
          "metadata_uri": {
            "type": "string",
            "description": "metadata uri of the ip token"
          },
          "sequels_amount": {
            "type": "string",
            "description": "sequels amount of the ip token"
          },
          "credit_price": {
            "type": "number",
            "description": "credit price of the ip token, this field is only used for license purchase"
          },
          "created_at": {
            "type": "string",
            "description": "created at of the ip token"
          },
          "updated_at": {
            "type": "string",
            "description": "updated at of the ip token"
          },
          "change5m": {
            "type": "string",
            "description": "5m change of the ip token"
          },
          "change1h": {
            "type": "string",
            "description": "1h change of the ip token"
          },
          "change24h": {
            "type": "string",
            "description": "24h change of the ip token"
          },
          "volume": {
            "type": "string",
            "description": "trade volume of the ip token"
          },
          "on_exchange": {
            "type": "boolean",
            "description": "on exchange of the ip token"
          },
          "poolAddress": {
            "type": "string",
            "description": "pool address of the ip token"
          }
        },
        "required": [
          "user_address",
          "mint",
          "bonding_curve",
          "bonding_curve_progress",
          "name",
          "symbol",
          "price",
          "market_cap",
          "circulating_supply",
          "total_supply",
          "cover_url",
          "file_url",
          "twitter",
          "telegram",
          "website",
          "visitLink",
          "status",
          "signature",
          "description",
          "metadata_uri",
          "sequels_amount",
          "credit_price",
          "created_at",
          "updated_at"
        ]
      },
      "UserTokenRewardsDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token address"
          },
          "token_info": {
            "description": "Token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ticker": {
            "type": "string",
            "description": "Token ticker"
          },
          "rewards": {
            "type": "number",
            "description": "Token rewards"
          },
          "locked": {
            "type": "number",
            "description": "Token locked"
          },
          "released": {
            "type": "number",
            "description": "Token released"
          },
          "availables": {
            "type": "number",
            "description": "The available tokens can be claimed"
          }
        },
        "required": [
          "token",
          "token_info",
          "ticker",
          "rewards",
          "locked",
          "released",
          "availables"
        ]
      },
      "UserTokenRewardsListDto": {
        "type": "object",
        "properties": {
          "rewards": {
            "description": "Token rewards",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTokenRewardsDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total token rewards of user"
          }
        },
        "required": [
          "rewards",
          "total"
        ]
      },
      "ClaimRewardsDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token address"
          },
          "amount": {
            "type": "number",
            "description": "Amount to claim"
          }
        },
        "required": [
          "token",
          "amount"
        ]
      },
      "UserRewardsClaimDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Claim id"
          },
          "token": {
            "type": "string",
            "description": "Token address"
          },
          "status": {
            "type": "string",
            "description": "Claim status",
            "enum": [
              "pending",
              "completed",
              "failed",
              "rejected"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "created at"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "updated at"
          },
          "user": {
            "type": "string",
            "description": "user id"
          },
          "withdrawn": {
            "type": "number",
            "description": "Withdrawn amount"
          }
        },
        "required": [
          "id",
          "token",
          "status",
          "created_at",
          "updated_at",
          "user",
          "withdrawn"
        ]
      },
      "ClaimRewardsHistoryListDto": {
        "type": "object",
        "properties": {
          "claims": {
            "description": "The claims",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRewardsClaimDto"
            }
          },
          "total": {
            "type": "number",
            "description": "The total claims"
          }
        },
        "required": [
          "claims",
          "total"
        ]
      },
      "InvitationsDetailDto": {
        "type": "object",
        "properties": {}
      },
      "GetInviteCodeDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Invitation code"
          }
        },
        "required": [
          "code"
        ]
      },
      "LoginWithCodeReqDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "code"
        ]
      },
      "LoginResponseDTO": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "GetIpTokenListResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "count of ip tokens"
          },
          "data": {
            "description": "list of ip tokens",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "TradeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of the trade",
            "enum": [
              "buy",
              "sell"
            ],
            "example": "buy"
          },
          "token": {
            "type": "string",
            "description": "token address of the trade"
          },
          "amount": {
            "type": "number",
            "description": "amount of the trade"
          }
        },
        "required": [
          "type",
          "token",
          "amount"
        ]
      },
      "TradeResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "status of the trade, 1: pending, 2: success, 3: failed",
            "enum": [
              1,
              2,
              3
            ]
          },
          "sign": {
            "description": "sign of the trade",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "status",
          "sign"
        ]
      },
      "PercentageToCreditsDTO": {
        "type": "object",
        "properties": {
          "usdc": {
            "type": "number",
            "description": "usdt to be consumed",
            "example": 100
          },
          "giggle_tokens": {
            "type": "number",
            "description": "giggle tokens",
            "example": 100000
          }
        },
        "required": [
          "usdc",
          "giggle_tokens"
        ]
      },
      "CreateLaunchAgentResponseDto": {
        "type": "object",
        "properties": {}
      },
      "ParseLaunchLaunchPlanRequestDto": {
        "type": "object",
        "properties": {
          "instruction": {
            "type": "string",
            "description": "instruction of the launch agent"
          }
        },
        "required": [
          "instruction"
        ]
      },
      "ParseLaunchLaunchPlanResponseDto": {
        "type": "object",
        "properties": {}
      },
      "GenerateLaunchAgentWalletsRequestDto": {
        "type": "object",
        "properties": {}
      },
      "GenerateLaunchAgentWalletsResponseDto": {
        "type": "object",
        "properties": {}
      },
      "CheckAgentWalletsStatusRequestDto": {
        "type": "object",
        "properties": {}
      },
      "CheckAgentWalletsStatusResponseDto": {
        "type": "object",
        "properties": {}
      },
      "SuggestBondingSegmentsRequestDto": {
        "type": "object",
        "properties": {}
      },
      "SuggestBondingSegmentsResponseDto": {
        "type": "object",
        "properties": {}
      },
      "MintNftReqDto": {
        "type": "object",
        "properties": {
          "cover_asset_id": {
            "type": "string",
            "description": "The cover image asset id to mint, must be an image asset"
          },
          "name": {
            "type": "string",
            "description": "The name of the nft",
            "example": "My Nft",
            "maxLength": 128
          },
          "description": {
            "type": "string",
            "description": "The description of the nft",
            "example": "This is my nft",
            "maxLength": 2048
          },
          "video_asset_id": {
            "type": "string",
            "description": "The video asset id to mint, if not provided, the nft will be an image nft"
          }
        },
        "required": [
          "cover_asset_id",
          "name",
          "description"
        ]
      },
      "NftDetailResDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "User id"
          },
          "cover_asset_id": {
            "type": "string",
            "description": "Cover asset id"
          },
          "video_asset_id": {
            "type": "string",
            "description": "Video asset id"
          },
          "widget_tag": {
            "type": "string",
            "description": "Widget tag"
          },
          "app_id": {
            "type": "string",
            "description": "App id"
          },
          "mint_task_id": {
            "type": "string",
            "description": "Task id of minting nft"
          },
          "collection": {
            "type": "string",
            "description": "Collection name of the nft"
          },
          "mint": {
            "type": "string",
            "description": "Nft address"
          },
          "metadata": {
            "type": "object",
            "description": "Metadata",
            "example": {
              "name": "Nft Name",
              "description": "Nft Description",
              "image": "https://example.com/image.png"
            }
          },
          "mint_status": {
            "type": "string",
            "description": "Nft status"
          },
          "failure_reason": {
            "type": "string",
            "description": "Failure reason"
          },
          "signature": {
            "type": "string",
            "description": "Signature of minting nft"
          }
        },
        "required": [
          "user",
          "cover_asset_id",
          "video_asset_id",
          "widget_tag",
          "app_id",
          "collection",
          "mint",
          "metadata",
          "mint_status",
          "failure_reason",
          "signature"
        ]
      },
      "MyNftListResDto": {
        "type": "object",
        "properties": {
          "nfts": {
            "description": "Nft list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NftDetailResDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total count"
          }
        },
        "required": [
          "nfts",
          "total"
        ]
      },
      "AssetDetailDto": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string",
            "description": "asset id of the asset"
          },
          "name": {
            "type": "string",
            "description": "name of the asset, not unique"
          },
          "type": {
            "type": "string",
            "description": "type of the asset, all, video, image"
          },
          "category": {
            "type": "string",
            "description": "category of the asset, uploads, exports, ip-clips"
          },
          "path": {
            "type": "string",
            "description": "path of the asset in s3"
          },
          "path_optimized": {
            "type": "object",
            "description": "optimized path of the asset in s3"
          },
          "user": {
            "type": "string",
            "description": "belong to which user"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "created time of the asset"
          },
          "thumbnail": {
            "type": "string",
            "description": "thumbnail of the asset"
          },
          "source_video": {
            "type": "number",
            "description": "Source video id, only available for category exports and type video, this indicates the id of the video that was exported to create this asset"
          },
          "asset_info": {
            "type": "object",
            "description": "info of the asset, normaly video or image metadata"
          },
          "ipfs_key": {
            "type": "string",
            "description": "ipfs key of the asset"
          },
          "widget_tag": {
            "type": "string",
            "description": "widget tag of the asset"
          },
          "app_id": {
            "type": "string",
            "description": "app id of the asset"
          },
          "head_object": {
            "type": "object",
            "description": "head object of the asset"
          },
          "signed_url": {
            "type": "string",
            "description": "signed url of the asset, for browser to access"
          },
          "optimized_urls": {
            "type": "object",
            "description": "optimized urls of the asset"
          },
          "download_url": {
            "type": "string",
            "description": "signed url of the asset, for download"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "thumbnail url of the asset"
          },
          "public_url": {
            "type": "string",
            "description": "Public url of the asset, this url will be accessible by anyone if you uploaded with public is true, otherwise this value is empty"
          }
        },
        "required": [
          "asset_id",
          "name",
          "type",
          "category",
          "path",
          "user",
          "created_at",
          "thumbnail",
          "source_video",
          "asset_info",
          "ipfs_key",
          "widget_tag",
          "app_id",
          "head_object",
          "signed_url",
          "optimized_urls",
          "download_url",
          "thumbnail_url",
          "public_url"
        ]
      },
      "AssetsListResDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDetailDto"
            }
          },
          "total": {
            "type": "number",
            "description": "total number of assets"
          }
        },
        "required": [
          "data",
          "total"
        ]
      },
      "AssetRenameReqDto": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string",
            "description": "asset id of the asset"
          },
          "name": {
            "type": "string",
            "description": "new name of the asset"
          }
        },
        "required": [
          "asset_id",
          "name"
        ]
      },
      "AssetsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the asset"
          },
          "asset_id": {
            "type": "string",
            "description": "asset id of the asset"
          },
          "name": {
            "type": "string",
            "description": "name of the asset, not unique"
          },
          "type": {
            "type": "string",
            "description": "type of the asset, all, video, image"
          },
          "category": {
            "type": "string",
            "description": "category of the asset, uploads, exports, ip-clips"
          },
          "path": {
            "type": "string",
            "description": "path of the asset in s3"
          },
          "path_optimized": {
            "type": "object",
            "description": "optimized path of the asset in s3"
          },
          "user": {
            "type": "string",
            "description": "belong to which user"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "created time of the asset"
          },
          "thumbnail": {
            "type": "string",
            "description": "thumbnail of the asset"
          },
          "exported_by": {
            "type": "string",
            "description": "which product exported this asset, video-2-video or face-swap, etc..."
          },
          "source_video": {
            "type": "number",
            "description": "Source video id, only available for category exports and type video, this indicates the id of the video that was exported to create this asset"
          },
          "asset_info": {
            "type": "object",
            "description": "info of the asset, normaly video or image metadata"
          },
          "exported_by_task_id": {
            "type": "string",
            "description": "task id of the asset, only available for internal use, this indicates the id of the task that was exported to create this asset"
          },
          "ipfs_key": {
            "type": "string",
            "description": "ipfs key of the asset"
          },
          "widget_tag": {
            "type": "string",
            "description": "widget tag of the asset"
          },
          "app_id": {
            "type": "string",
            "description": "app id of the asset"
          },
          "head_object": {
            "type": "object",
            "description": "head object of the asset"
          }
        },
        "required": [
          "id",
          "asset_id",
          "name",
          "type",
          "category",
          "path",
          "user",
          "created_at",
          "thumbnail",
          "exported_by",
          "source_video",
          "asset_info",
          "exported_by_task_id",
          "ipfs_key",
          "widget_tag",
          "app_id",
          "head_object"
        ]
      },
      "GetPresignedUploadUrlReqDto": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "\nName of the file. Currently we support below formats:\n- video: mp4, mov, mkv, jpeg, jpg, png, \n- image: jpeg, jpg, png, \n- audio: mp3, wav, m4a"
          },
          "content_type": {
            "type": "string",
            "description": "content type of the file"
          },
          "is_public": {
            "type": "boolean",
            "description": "Is this asset public, default is false, if true, the asset will be public and can be accessed by anyone."
          }
        },
        "required": [
          "file_name",
          "content_type"
        ]
      },
      "GetPresignedUploadUrlResDto": {
        "type": "object",
        "properties": {
          "object_key": {
            "type": "string",
            "description": "object key of the asset in s3"
          },
          "signed_url": {
            "type": "string",
            "description": "signed url of the asset, for upload, you need use PUT method to upload the asset via this url"
          }
        },
        "required": [
          "object_key",
          "signed_url"
        ]
      },
      "RegisterAssetDto": {
        "type": "object",
        "properties": {
          "object_key": {
            "type": "string",
            "description": "widget tag of the asset"
          },
          "name": {
            "type": "string",
            "description": "name of the asset"
          }
        },
        "required": [
          "object_key",
          "name"
        ]
      },
      "DeleteAssetDto": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "number",
            "description": "id of the asset"
          }
        },
        "required": [
          "asset_id"
        ]
      },
      "OrderListDto": {
        "type": "object",
        "properties": {
          "orders": {
            "description": "The list of orders",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "number",
            "description": "The total number of orders"
          }
        },
        "required": [
          "orders",
          "total"
        ]
      },
      "RewardAllocateRatio": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of the account"
          },
          "ratio": {
            "type": "number",
            "description": "Ratio of tokens to be allocated to the pool"
          },
          "role": {
            "type": "string",
            "description": "Role of the account",
            "enum": [
              "buyback",
              "customized",
              "platform",
              "ip-holder"
            ]
          },
          "allocate_type": {
            "type": "string",
            "description": "Type of the allocation",
            "enum": [
              "token",
              "usdc"
            ]
          }
        },
        "required": [
          "address",
          "ratio",
          "role",
          "allocate_type"
        ]
      },
      "LimitOffer": {
        "type": "object",
        "properties": {
          "external_ratio": {
            "type": "number",
            "description": "External ratio of the limit offer"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Start date of the limit offer"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "End date of the limit offer"
          }
        },
        "required": [
          "external_ratio",
          "start_date",
          "end_date"
        ]
      },
      "RewardSnapshotDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token of the pool"
          },
          "ticker": {
            "type": "string",
            "description": "Ticker of the pool"
          },
          "unit_price": {
            "type": "string",
            "description": "Unit price of the token"
          },
          "revenue_ratio": {
            "description": "Revenue ratio of the pool",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardAllocateRatio"
            }
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at"
          },
          "snapshot_date": {
            "format": "date-time",
            "type": "string",
            "description": "Snapshot date"
          },
          "limit_offer": {
            "description": "Limit offer of the pool",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitOffer"
              }
            ]
          }
        },
        "required": [
          "token",
          "ticker",
          "unit_price",
          "revenue_ratio",
          "updated_at",
          "created_at",
          "snapshot_date"
        ]
      },
      "PoolResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ID of the pool"
          },
          "token": {
            "type": "string",
            "description": "Token of the pool"
          },
          "ticker": {
            "type": "string",
            "description": "Ticker of the pool"
          },
          "owner": {
            "type": "string",
            "description": "Owner of the pool"
          },
          "revenue_ratio": {
            "type": "object",
            "description": "Revenue ratio of the pool"
          },
          "address": {
            "type": "string",
            "description": "Address of the pool"
          },
          "buyback_address": {
            "type": "string",
            "description": "Buyback address of the pool"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at"
          },
          "unit_price": {
            "type": "string",
            "description": "Unit price of the token"
          },
          "injected_amount": {
            "type": "string",
            "description": "Injected amount of the pool"
          },
          "rewarded_amount": {
            "type": "string",
            "description": "Rewarded amount of the pool"
          },
          "current_balance": {
            "type": "string",
            "description": "Current balance of the pool"
          },
          "current_balance_in_usdc": {
            "type": "string",
            "description": "Current balance of the pool in USDC"
          },
          "limit_offers": {
            "description": "Limit offer of the pool",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "owed_amount": {
            "type": "number",
            "description": "Owed amount of the pool"
          },
          "buyback_burn_ratio": {
            "type": "number",
            "description": "Buyback burn ratio of the pool"
          }
        },
        "required": [
          "id",
          "token",
          "ticker",
          "owner",
          "revenue_ratio",
          "address",
          "buyback_address",
          "created_at",
          "updated_at",
          "unit_price",
          "injected_amount",
          "rewarded_amount",
          "current_balance",
          "current_balance_in_usdc",
          "limit_offers",
          "owed_amount",
          "buyback_burn_ratio"
        ]
      },
      "OrderCostsAllocationDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Cost amount of the order, must be integer, 100 means $1.00, min is 1($0.01)"
          },
          "type": {
            "type": "string",
            "description": "The type of the cost",
            "enum": [
              "developer_cost",
              "goods_cost",
              "creator_cost",
              "platform"
            ]
          },
          "email": {
            "type": "string",
            "description": "The user of the cost, when order paid, the cost will be distributed to this user, default is developer"
          }
        },
        "required": [
          "amount",
          "type"
        ]
      },
      "IpHolderRevenueReallocationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The user email of the ip holder, if not exists, this record will be ignored"
          },
          "allocate_role": {
            "type": "string",
            "description": "The allocate role of the ip holder revenue",
            "enum": [
              "creator",
              "uploader",
              "remixer",
              "other"
            ]
          },
          "percent": {
            "type": "number",
            "description": "The percent of the ip holder revenue, must be integer, 1 means 100%, min is 1(1%)"
          }
        },
        "required": [
          "email",
          "allocate_role",
          "percent"
        ]
      },
      "EstimatedRewardsDto": {
        "type": "object",
        "properties": {
          "base_rewards": {
            "type": "number",
            "description": "The base rewards of the order"
          },
          "bonus_rewards": {
            "type": "number",
            "description": "The bonus rewards of the order"
          },
          "total_rewards": {
            "type": "number",
            "description": "The total rewards of the order"
          },
          "limit_offer": {
            "description": "The limit offer of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitOffer"
              }
            ]
          }
        },
        "required": [
          "base_rewards",
          "bonus_rewards",
          "total_rewards",
          "limit_offer"
        ]
      },
      "OrderDetailDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The order id"
          },
          "description": {
            "type": "string",
            "description": "The description of the order"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the order"
          },
          "item": {
            "type": "string",
            "description": "The item of the order"
          },
          "ip_id": {
            "type": "number",
            "description": "The ip id of the order"
          },
          "owner": {
            "type": "string",
            "description": "The owner of the order"
          },
          "widget_tag": {
            "type": "string",
            "description": "The widget tag of the order created by"
          },
          "app_id": {
            "type": "string",
            "description": "The app id of the order created by"
          },
          "is_credit_top_up": {
            "type": "boolean",
            "description": "The is credit top up of the order"
          },
          "current_status": {
            "type": "string",
            "description": "The current status of the order"
          },
          "paid_method": {
            "type": "string",
            "description": "The paid method of the order"
          },
          "related_reward_id": {
            "type": "number",
            "description": "The related reward pool id of the order, note: this field may be require if we finish our economic model"
          },
          "release_rewards_after_paid": {
            "type": "boolean",
            "description": "The release rewards after paid of the order"
          },
          "buyback_after_paid": {
            "type": "boolean",
            "description": "The buyback after paid of the order"
          },
          "supported_payment_method": {
            "description": "The supported payment method of the order",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "redirect_url": {
            "type": "string",
            "description": "The redirect url after order is paid"
          },
          "paid_time": {
            "format": "date-time",
            "type": "string",
            "description": "The paid time of the order"
          },
          "expire_time": {
            "format": "date-time",
            "type": "string",
            "description": "The expire time of the order, default is 15 minutes"
          },
          "cancelled_time": {
            "format": "date-time",
            "type": "string",
            "description": "The cancelled time of the order"
          },
          "cancelled_detail": {
            "type": "object",
            "description": "The cancelled detail of the order"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The created time of the order"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The updated time of the order"
          },
          "from_source_link": {
            "type": "string",
            "description": "The source link of the order"
          },
          "credit_paid_amount": {
            "type": "number",
            "description": "The credit paid amount of the order"
          },
          "refund_time": {
            "format": "date-time",
            "type": "string",
            "description": "The refund time of the order"
          },
          "refund_status": {
            "type": "string",
            "description": "The refund status of the order"
          },
          "refund_error": {
            "type": "object",
            "description": "The refund error of the order"
          },
          "refund_detail": {
            "type": "object",
            "description": "The refund detail of the order"
          },
          "rewards_model_snapshot": {
            "description": "The rewards model snapshot of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardSnapshotDto"
              }
            ]
          },
          "current_reward_pool_detail": {
            "description": "The current reward pool detail of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/PoolResponseDto"
              }
            ]
          },
          "order_url": {
            "type": "string",
            "description": "The url of order to pay or check the order status"
          },
          "source_link_summary": {
            "description": "The source link summary of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkSummaryDto"
              }
            ]
          },
          "costs_allocation": {
            "description": "The costs allocation of the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCostsAllocationDto"
            }
          },
          "ip_holder_revenue_reallocation": {
            "description": "The ip holder revenue re-allocation of the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpHolderRevenueReallocationDto"
            }
          },
          "estimated_rewards": {
            "description": "The estimated rewards of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimatedRewardsDto"
              }
            ]
          }
        },
        "required": [
          "order_id",
          "amount",
          "item",
          "ip_id",
          "owner",
          "is_credit_top_up",
          "current_status",
          "paid_method",
          "release_rewards_after_paid",
          "buyback_after_paid",
          "supported_payment_method",
          "redirect_url",
          "paid_time",
          "expire_time",
          "cancelled_time",
          "cancelled_detail",
          "created_at",
          "updated_at",
          "from_source_link",
          "credit_paid_amount",
          "refund_time",
          "refund_status",
          "refund_error",
          "refund_detail",
          "rewards_model_snapshot",
          "current_reward_pool_detail",
          "order_url",
          "estimated_rewards"
        ]
      },
      "DeveloperSpecifiedRewardSnapshotDto": {
        "type": "object",
        "properties": {
          "revenue_ratio": {
            "description": "Revenue ratio of the pool, the sum of ratio must be 90(90%), since platform will take 10% of the revenue",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RewardAllocateRatio"
            }
          },
          "released_token_ratio": {
            "type": "number",
            "description": "Released token ratio for order paid, 0 means no token released, 1 means 1%, this must be 0-200(0%-200%)"
          }
        },
        "required": [
          "revenue_ratio",
          "released_token_ratio"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount of the order, only accept integer, 100 means $1.00, min is 1($0.01)"
          },
          "item": {
            "type": "string",
            "description": "The item of the order"
          },
          "release_rewards_after_paid": {
            "type": "boolean",
            "description": "Release rewards after paid of the order, default is `false`, **NOTE:** order will be **NOT** refundable if rewards are released",
            "default": false
          },
          "buyback_after_paid": {
            "type": "boolean",
            "description": "Buyback after paid of the order, default is `false`,if release_rewards_after_paid set to `true`, the rewards will be released after buyback",
            "default": false
          },
          "rewards_model": {
            "description": "The rewards model of the order, this only allow requester is developer",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeveloperSpecifiedRewardSnapshotDto"
              }
            ]
          },
          "reward_token": {
            "type": "string",
            "description": "The token of the order rewards, if not provided, the default token will be used, this token must be app bind ip or child ip of app bind ip"
          },
          "allowed_payment_methods": {
            "type": "array",
            "description": "The allowed payment methods of the order, if not provided, the default payment method will be used",
            "items": {
              "type": "string",
              "enum": [
                "stripe",
                "wallet",
                "wechat",
                "credit"
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The description of the order"
          },
          "redirect_url": {
            "type": "string",
            "description": "The redirect url after order is paid"
          },
          "callback_url": {
            "type": "string",
            "description": "The callback url of the order, this url will be called when the order is paid or refunded or cancelled"
          },
          "user_jwt": {
            "type": "string",
            "description": "The user jwt, this parameter is required if requester is from developer"
          },
          "costs_allocation": {
            "description": "The costs of the order.\n    This parameter is only allowed when requester is developer.\n    Can be multiple costs and the total amount of the costs must be less than the 90% of the amount of the order.\n    The costs will be distributed to the distribute_wallet provided.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCostsAllocationDto"
            }
          },
          "ip_holder_revenue_reallocation": {
            "description": "The ip holder revenue re-allocation of the order,\n    This parameter is only allowed when requester is developer.\n    For example, if the order amount is $100, the ip holder revenue re-allocation is:\n\n```json\n[\n    {\n        user_id: \"123\",\n        percent: 50\n    },\n    {\n        user_id: \"456\",\n        percent: 50\n    }\n]\n```\n\nThe order revenue will be distributed to the user 123 and 456, all of them will get 50%($50.00) of the order revenue. ip holder will get **$0** of the this order but also need to release token if order paid.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpHolderRevenueReallocationDto"
            }
          }
        },
        "required": [
          "amount"
        ]
      },
      "PreviewOrderDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the order"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the order"
          },
          "item": {
            "type": "string",
            "description": "The item of the order"
          },
          "ip_id": {
            "type": "number",
            "description": "The ip id of the order"
          },
          "owner": {
            "type": "string",
            "description": "The owner of the order"
          },
          "widget_tag": {
            "type": "string",
            "description": "The widget tag of the order created by"
          },
          "app_id": {
            "type": "string",
            "description": "The app id of the order created by"
          },
          "is_credit_top_up": {
            "type": "boolean",
            "description": "The is credit top up of the order"
          },
          "paid_method": {
            "type": "string",
            "description": "The paid method of the order"
          },
          "related_reward_id": {
            "type": "number",
            "description": "The related reward pool id of the order, note: this field may be require if we finish our economic model"
          },
          "release_rewards_after_paid": {
            "type": "boolean",
            "description": "The release rewards after paid of the order"
          },
          "buyback_after_paid": {
            "type": "boolean",
            "description": "The buyback after paid of the order"
          },
          "supported_payment_method": {
            "description": "The supported payment method of the order",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "redirect_url": {
            "type": "string",
            "description": "The redirect url after order is paid"
          },
          "paid_time": {
            "format": "date-time",
            "type": "string",
            "description": "The paid time of the order"
          },
          "expire_time": {
            "format": "date-time",
            "type": "string",
            "description": "The expire time of the order, default is 15 minutes"
          },
          "cancelled_time": {
            "format": "date-time",
            "type": "string",
            "description": "The cancelled time of the order"
          },
          "cancelled_detail": {
            "type": "object",
            "description": "The cancelled detail of the order"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The created time of the order"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The updated time of the order"
          },
          "from_source_link": {
            "type": "string",
            "description": "The source link of the order"
          },
          "credit_paid_amount": {
            "type": "number",
            "description": "The credit paid amount of the order"
          },
          "refund_time": {
            "format": "date-time",
            "type": "string",
            "description": "The refund time of the order"
          },
          "refund_status": {
            "type": "string",
            "description": "The refund status of the order"
          },
          "refund_error": {
            "type": "object",
            "description": "The refund error of the order"
          },
          "refund_detail": {
            "type": "object",
            "description": "The refund detail of the order"
          },
          "rewards_model_snapshot": {
            "description": "The rewards model snapshot of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardSnapshotDto"
              }
            ]
          },
          "current_reward_pool_detail": {
            "description": "The current reward pool detail of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/PoolResponseDto"
              }
            ]
          },
          "source_link_summary": {
            "description": "The source link summary of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkSummaryDto"
              }
            ]
          },
          "costs_allocation": {
            "description": "The costs allocation of the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCostsAllocationDto"
            }
          },
          "ip_holder_revenue_reallocation": {
            "description": "The ip holder revenue re-allocation of the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpHolderRevenueReallocationDto"
            }
          },
          "estimated_rewards": {
            "description": "The estimated rewards of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimatedRewardsDto"
              }
            ]
          }
        },
        "required": [
          "amount",
          "item",
          "ip_id",
          "owner",
          "is_credit_top_up",
          "paid_method",
          "release_rewards_after_paid",
          "buyback_after_paid",
          "supported_payment_method",
          "redirect_url",
          "paid_time",
          "expire_time",
          "cancelled_time",
          "cancelled_detail",
          "created_at",
          "updated_at",
          "from_source_link",
          "credit_paid_amount",
          "refund_time",
          "refund_status",
          "refund_error",
          "refund_detail",
          "rewards_model_snapshot",
          "current_reward_pool_detail",
          "estimated_rewards"
        ]
      },
      "ReleaseRewardsDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The order id"
          }
        },
        "required": [
          "order_id"
        ]
      },
      "OrderRewardsDto": {
        "type": "object",
        "properties": {
          "statement_id": {
            "type": "number"
          },
          "rewards_type": {
            "type": "string"
          },
          "order_id": {
            "type": "string",
            "description": "The order id"
          },
          "role": {
            "type": "string",
            "description": "The actual allocated role of the order rewards"
          },
          "expected_role": {
            "type": "string",
            "description": "The expected role of the order rewards"
          },
          "wallet_address": {
            "type": "string",
            "description": "The wallet address of the order rewards"
          },
          "token": {
            "type": "string",
            "description": "The token of the order rewards"
          },
          "ticker": {
            "type": "string",
            "description": "The ticker of the order rewards"
          },
          "start_allocate": {
            "format": "date-time",
            "type": "string",
            "description": "The start allocate of the order rewards"
          },
          "end_allocate": {
            "format": "date-time",
            "type": "string",
            "description": "The end allocate of the order rewards"
          },
          "note": {
            "type": "string",
            "description": "The note of the order rewards"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The created at of the order rewards"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The updated at of the order rewards"
          },
          "rewards": {
            "type": "string",
            "description": "The rewards of the order rewards"
          },
          "released_per_day": {
            "type": "string",
            "description": "The released per day of the order rewards"
          },
          "released_rewards": {
            "type": "string",
            "description": "The released rewards of the order rewards"
          },
          "locked_rewards": {
            "type": "string",
            "description": "The locked rewards of the order rewards"
          },
          "withdraw_rewards": {
            "type": "string",
            "description": "The withdraw rewards of the order rewards"
          },
          "cost_amount": {
            "type": "string",
            "description": "The cost amount of the order rewards"
          },
          "cost_type": {
            "type": "string",
            "description": "The cost type of the order rewards",
            "enum": [
              "developer_cost",
              "goods_cost",
              "creator_cost",
              "platform"
            ]
          },
          "user_info": {
            "type": "object",
            "description": "The user info of the order rewards"
          }
        },
        "required": [
          "statement_id",
          "rewards_type",
          "order_id",
          "role",
          "expected_role",
          "wallet_address",
          "token",
          "ticker",
          "start_allocate",
          "end_allocate",
          "note",
          "created_at",
          "updated_at",
          "rewards",
          "released_per_day",
          "released_rewards",
          "locked_rewards",
          "withdraw_rewards",
          "cost_amount",
          "cost_type",
          "user_info"
        ]
      },
      "BindRewardPoolDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The order id"
          }
        },
        "required": [
          "order_id"
        ]
      },
      "ResendCallbackRequestDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The order id"
          },
          "new_callback_url": {
            "type": "string",
            "description": "The new callback url, if not provided, the old callback url will be used"
          }
        },
        "required": [
          "order_id"
        ]
      },
      "OrderCallbackDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The order id"
          },
          "description": {
            "type": "string",
            "description": "The description of the order"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the order"
          },
          "item": {
            "type": "string",
            "description": "The item of the order"
          },
          "ip_id": {
            "type": "number",
            "description": "The ip id of the order"
          },
          "owner": {
            "type": "string",
            "description": "The owner of the order"
          },
          "widget_tag": {
            "type": "string",
            "description": "The widget tag of the order created by"
          },
          "app_id": {
            "type": "string",
            "description": "The app id of the order created by"
          },
          "is_credit_top_up": {
            "type": "boolean",
            "description": "The is credit top up of the order"
          },
          "current_status": {
            "type": "string",
            "description": "The current status of the order"
          },
          "paid_method": {
            "type": "string",
            "description": "The paid method of the order"
          },
          "related_reward_id": {
            "type": "number",
            "description": "The related reward pool id of the order, note: this field may be require if we finish our economic model"
          },
          "release_rewards_after_paid": {
            "type": "boolean",
            "description": "The release rewards after paid of the order"
          },
          "buyback_after_paid": {
            "type": "boolean",
            "description": "The buyback after paid of the order"
          },
          "supported_payment_method": {
            "description": "The supported payment method of the order",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "redirect_url": {
            "type": "string",
            "description": "The redirect url after order is paid"
          },
          "paid_time": {
            "format": "date-time",
            "type": "string",
            "description": "The paid time of the order"
          },
          "expire_time": {
            "format": "date-time",
            "type": "string",
            "description": "The expire time of the order, default is 15 minutes"
          },
          "cancelled_time": {
            "format": "date-time",
            "type": "string",
            "description": "The cancelled time of the order"
          },
          "cancelled_detail": {
            "type": "object",
            "description": "The cancelled detail of the order"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The created time of the order"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The updated time of the order"
          },
          "from_source_link": {
            "type": "string",
            "description": "The source link of the order"
          },
          "credit_paid_amount": {
            "type": "number",
            "description": "The credit paid amount of the order"
          },
          "refund_time": {
            "format": "date-time",
            "type": "string",
            "description": "The refund time of the order"
          },
          "refund_status": {
            "type": "string",
            "description": "The refund status of the order"
          },
          "refund_error": {
            "type": "object",
            "description": "The refund error of the order"
          },
          "refund_detail": {
            "type": "object",
            "description": "The refund detail of the order"
          },
          "rewards_model_snapshot": {
            "description": "The rewards model snapshot of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/RewardSnapshotDto"
              }
            ]
          },
          "current_reward_pool_detail": {
            "description": "The current reward pool detail of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/PoolResponseDto"
              }
            ]
          },
          "order_url": {
            "type": "string",
            "description": "The url of order to pay or check the order status"
          },
          "source_link_summary": {
            "description": "The source link summary of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkSummaryDto"
              }
            ]
          },
          "costs_allocation": {
            "description": "The costs allocation of the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderCostsAllocationDto"
            }
          },
          "ip_holder_revenue_reallocation": {
            "description": "The ip holder revenue re-allocation of the order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpHolderRevenueReallocationDto"
            }
          },
          "estimated_rewards": {
            "description": "The estimated rewards of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/EstimatedRewardsDto"
              }
            ]
          },
          "jwt_verify": {
            "type": "string",
            "description": "The jwt verify of the order"
          }
        },
        "required": [
          "order_id",
          "amount",
          "item",
          "ip_id",
          "owner",
          "is_credit_top_up",
          "current_status",
          "paid_method",
          "release_rewards_after_paid",
          "buyback_after_paid",
          "supported_payment_method",
          "redirect_url",
          "paid_time",
          "expire_time",
          "cancelled_time",
          "cancelled_detail",
          "created_at",
          "updated_at",
          "from_source_link",
          "credit_paid_amount",
          "refund_time",
          "refund_status",
          "refund_error",
          "refund_detail",
          "rewards_model_snapshot",
          "current_reward_pool_detail",
          "order_url",
          "estimated_rewards",
          "jwt_verify"
        ]
      },
      "RefundOrderDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The order id"
          }
        },
        "required": [
          "order_id"
        ]
      },
      "UnbindRewardPoolDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The order id"
          }
        },
        "required": [
          "order_id"
        ]
      },
      "CreateRewardsPoolDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token mint address"
          },
          "amount": {
            "type": "number",
            "description": "Amount of tokens to be allocated to the pool"
          },
          "limit_offers": {
            "description": "Limit offer of the pool",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "buyback_burn_ratio": {
            "type": "number",
            "description": "Buyback burn ratio of the pool"
          },
          "revenue_ratio": {
            "description": "Revenue ratio of the pool, all revenue will be allocated depends on this ratio",
            "properties": {
              "address": {
                "type": "string",
                "example": ""
              },
              "ratio": {
                "type": "number",
                "example": 40
              },
              "role": {
                "type": "string",
                "enum": {
                  "BUYBACK": "buyback",
                  "CUSTOMIZED": "customized",
                  "PLATFORM": "platform",
                  "IPHOLDER": "ip-holder"
                },
                "example": "buyback"
              }
            },
            "example": [
              {
                "address": "",
                "ratio": 40,
                "role": "buyback",
                "allocate_type": "usdc"
              },
              {
                "address": "",
                "ratio": 40,
                "role": "ip-holder",
                "allocate_type": "usdc"
              },
              {
                "address": "some customized address",
                "ratio": 10,
                "role": "customized",
                "allocate_type": "usdc"
              }
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "token",
          "amount",
          "revenue_ratio"
        ]
      },
      "UpdateRewardsPoolDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token mint address"
          },
          "limit_offers": {
            "description": "Limit offer of the pool",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "buyback_burn_ratio": {
            "type": "number",
            "description": "Buyback burn ratio of the pool"
          },
          "revenue_ratio": {
            "description": "Revenue ratio of the pool, all revenue will be allocated depends on this ratio",
            "properties": {
              "address": {
                "type": "string",
                "example": ""
              },
              "ratio": {
                "type": "number",
                "example": 40
              },
              "role": {
                "type": "string",
                "enum": {
                  "BUYBACK": "buyback",
                  "CUSTOMIZED": "customized",
                  "PLATFORM": "platform",
                  "IPHOLDER": "ip-holder"
                },
                "example": "buyback"
              }
            },
            "example": [
              {
                "address": "",
                "ratio": 40,
                "role": "buyback",
                "allocate_type": "usdc"
              },
              {
                "address": "",
                "ratio": 40,
                "role": "ip-holder",
                "allocate_type": "usdc"
              },
              {
                "address": "some customized address",
                "ratio": 10,
                "role": "customized",
                "allocate_type": "usdc"
              }
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "token",
          "revenue_ratio"
        ]
      },
      "InjectTokensDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token address"
          },
          "append_amount": {
            "type": "number",
            "description": "Amount of tokens to be appended to the pool"
          }
        },
        "required": [
          "token",
          "append_amount"
        ]
      },
      "RequestAirdropDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "token address"
          },
          "email": {
            "type": "string",
            "description": "email of the user to be airdropped"
          },
          "usd_amount": {
            "type": "number",
            "description": "USDC valued amount of tokens, if you want airdrop specific amount of tokens, set this to 0 and provide token_amount."
          },
          "token_amount": {
            "type": "number",
            "description": "Amount of tokens to be airdropped, if you want airdrop USDC valued amount, set this to 0 and provide usd_amount."
          },
          "type": {
            "type": "string",
            "description": "type of airdrop",
            "enum": [
              "invite",
              "interact",
              "other"
            ]
          }
        },
        "required": [
          "token",
          "email",
          "usd_amount",
          "token_amount",
          "type"
        ]
      },
      "AirdropResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "date"
          },
          "usd_revenue": {
            "type": "string",
            "description": "usd revenue"
          },
          "order_id": {
            "type": "string",
            "description": "order id"
          },
          "widget_tag": {
            "type": "string",
            "description": "widget id"
          },
          "rewarded_amount": {
            "type": "string",
            "description": "rewarded amount"
          },
          "balance": {
            "type": "string",
            "description": "balance"
          },
          "type": {
            "type": "string",
            "description": "type",
            "enum": [
              "released",
              "injected",
              "airdrop",
              "buyback"
            ]
          },
          "airdrop_type": {
            "type": "string",
            "description": "airdrop type",
            "enum": [
              "invite",
              "interact",
              "other"
            ]
          },
          "status": {
            "type": "string",
            "description": "status",
            "enum": [
              "created",
              "settled"
            ]
          },
          "chain_tx_link": {
            "type": "string",
            "description": "chain tx link"
          },
          "rewards_detail": {
            "description": "rewards detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderRewardsDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "date",
          "usd_revenue",
          "order_id",
          "widget_tag",
          "rewarded_amount",
          "balance",
          "type",
          "airdrop_type",
          "status",
          "chain_tx_link",
          "rewards_detail"
        ]
      },
      "AirdropResponseListDto": {
        "type": "object",
        "properties": {
          "airdrops": {
            "description": "list of airdrop",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AirdropResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "total"
          }
        },
        "required": [
          "airdrops",
          "total"
        ]
      },
      "PoolsResponseListDto": {
        "type": "object",
        "properties": {
          "pools": {
            "description": "List of rewards pools",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "number",
            "description": "Total amount of tokens in the pools"
          }
        },
        "required": [
          "pools",
          "total"
        ]
      },
      "StatisticsRolesDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "roles income",
            "enum": [
              "buyback",
              "customized",
              "platform",
              "ip-holder"
            ]
          },
          "income": {
            "type": "number",
            "description": "income"
          }
        },
        "required": [
          "role",
          "income"
        ]
      },
      "StatisticsSummaryDto": {
        "type": "object",
        "properties": {
          "incomes": {
            "type": "number",
            "description": "total income without platform"
          },
          "incomes_total": {
            "type": "number",
            "description": "total income with platform"
          },
          "orders": {
            "type": "number",
            "description": "total orders"
          },
          "unit_price": {
            "type": "number",
            "description": "unit price"
          },
          "price_change_24h": {
            "type": "number",
            "description": "price change 24h"
          },
          "market_cap": {
            "type": "number",
            "description": "market cap"
          },
          "trade_volume": {
            "type": "number",
            "description": "trade volume"
          },
          "current_balance": {
            "type": "number",
            "description": "current balance"
          },
          "injected_amount": {
            "type": "number",
            "description": "injected amount"
          },
          "buyback_amount": {
            "type": "number",
            "description": "buyback amount"
          },
          "rewarded_amount": {
            "type": "number",
            "description": "rewarded amount"
          },
          "roles_income": {
            "description": "roles income",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsRolesDto"
            }
          }
        },
        "required": [
          "incomes",
          "incomes_total",
          "orders",
          "unit_price",
          "price_change_24h",
          "market_cap",
          "trade_volume",
          "current_balance",
          "injected_amount",
          "buyback_amount",
          "rewarded_amount",
          "roles_income"
        ]
      },
      "StatisticsIncomesDto": {
        "type": "object",
        "properties": {
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "date"
          },
          "orders": {
            "type": "number",
            "description": "orders"
          },
          "order_amount": {
            "type": "number",
            "description": "amount"
          },
          "role_detail": {
            "description": "role summary",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "date",
          "orders",
          "order_amount",
          "role_detail"
        ]
      },
      "StatementResponseListDto": {
        "type": "object",
        "properties": {
          "statements": {
            "description": "list of statement",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "number",
            "description": "total"
          }
        },
        "required": [
          "statements",
          "total"
        ]
      },
      "TopUpDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount of the top up, every 1 credit is 0.01 USDC, minimum 500 credits and must be integer"
          },
          "callback_url": {
            "type": "string",
            "description": "The callback url when status changed of top up order"
          }
        },
        "required": [
          "amount"
        ]
      },
      "CreditStatementDetailDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the statement",
            "enum": [
              "top_up",
              "consume",
              "refund"
            ]
          },
          "amount": {
            "type": "number",
            "description": "The amount of the statement"
          },
          "balance": {
            "type": "number",
            "description": "After balance of the statement"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The created at of the statement"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The updated at of the statement"
          },
          "order_id": {
            "type": "string",
            "description": "The order id of the statement"
          },
          "widget_tag": {
            "type": "string",
            "description": "The widget tag of the order created by"
          },
          "ip_id": {
            "type": "number",
            "description": "The ip id of the order created by"
          }
        },
        "required": [
          "type",
          "amount",
          "balance",
          "created_at",
          "updated_at",
          "order_id",
          "widget_tag",
          "ip_id"
        ]
      },
      "GetStatementsResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "The total number of statements"
          },
          "statements": {
            "description": "The statements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditStatementDetailDto"
            }
          }
        },
        "required": [
          "count",
          "statements"
        ]
      },
      "SalesAgentSummaryDto": {
        "type": "object",
        "properties": {
          "total_orders": {
            "type": "number",
            "description": "total orders"
          },
          "total_referrends": {
            "type": "number",
            "description": "total referrends"
          },
          "total_revenue": {
            "type": "number",
            "description": "total revenue"
          }
        },
        "required": [
          "total_orders",
          "total_referrends",
          "total_revenue"
        ]
      },
      "SalesAgentIncomeResDto": {
        "type": "object",
        "properties": {
          "summary": {
            "description": "summary",
            "allOf": [
              {
                "$ref": "#/components/schemas/SalesAgentSummaryDto"
              }
            ]
          },
          "total": {
            "type": "number",
            "description": "total records"
          },
          "is_agent": {
            "type": "boolean",
            "description": "is requester an agent"
          },
          "list": {
            "description": "list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/"
            }
          }
        },
        "required": [
          "summary",
          "total",
          "is_agent",
          "list"
        ]
      },
      "CreateSalesAgentDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email"
          },
          "parent_agent": {
            "type": "string",
            "description": "Parent agent email"
          }
        },
        "required": [
          "email"
        ]
      },
      "SalesAgentDetailDto": {
        "type": "object",
        "properties": {}
      },
      "AppListDto": {
        "type": "object",
        "properties": {}
      },
      "OnChainDetailDto": {
        "type": "object",
        "properties": {
          "ipAddr": {
            "type": "string",
            "description": "ip address of the ip library"
          },
          "signature": {
            "type": "string",
            "description": "signature of the ip library"
          }
        },
        "required": [
          "ipAddr",
          "signature"
        ]
      },
      "IpSignatureClipMetadataDto": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "size of the signature clip"
          }
        },
        "required": [
          "size"
        ]
      },
      "IpSignatureClipDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the signature clip"
          },
          "name": {
            "type": "string",
            "description": "name of the signature clip"
          },
          "description": {
            "type": "string",
            "description": "description of the signature clip"
          },
          "object_key": {
            "type": "string",
            "description": "object key of the signature clip"
          },
          "ipfs_hash": {
            "type": "string",
            "description": "ipfs hash of the signature clip"
          },
          "thumbnail": {
            "type": "string",
            "description": "thumbnail of the signature clip"
          },
          "video_url": {
            "type": "string",
            "description": "video url of the signature clip"
          },
          "video_info": {
            "description": "video metadata of the signature clip",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpSignatureClipMetadataDto"
              }
            ]
          },
          "asset_id": {
            "type": "string",
            "description": "asset id of the signature clip"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "object_key",
          "ipfs_hash",
          "thumbnail",
          "video_url",
          "video_info",
          "asset_id"
        ]
      },
      "AppBindWidgetDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "tag of the widget"
          },
          "name": {
            "type": "string",
            "description": "name of the widget"
          }
        },
        "required": [
          "tag",
          "name"
        ]
      },
      "IpBindAppsDto": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "id of the app"
          },
          "bind_widgets": {
            "description": "bind widget of the app",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppBindWidgetDto"
            }
          }
        },
        "required": [
          "app_id",
          "bind_widgets"
        ]
      },
      "GenreDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the genre"
          },
          "value": {
            "type": "string",
            "description": "value of the genre"
          }
        },
        "required": [
          "name"
        ]
      },
      "IpSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "likes": {
            "type": "number",
            "description": "likes of the ip library"
          },
          "comments": {
            "type": "number",
            "description": "comments of the ip library"
          },
          "share_count": {
            "type": "number",
            "description": "share count of the ip library"
          },
          "is_user_liked": {
            "type": "boolean",
            "description": "is liked by the user"
          },
          "cover_asset_id": {
            "type": "string",
            "description": "cover asset id of the ip library"
          },
          "cover_image": {
            "type": "string",
            "description": "cover images of the ip library"
          },
          "cover_hash": {
            "type": "string",
            "description": "cover ipfs hash of the ip library"
          },
          "on_chain_detail": {
            "description": "on chain detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnChainDetailDto"
              }
            ]
          },
          "can_purchase": {
            "type": "boolean",
            "description": "can purchase"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines"
          },
          "governance_right": {
            "type": "boolean",
            "description": "is governance right"
          },
          "creator_id": {
            "type": "string",
            "description": "creator id of the ip library"
          },
          "creator": {
            "type": "string",
            "description": "creator of the ip library"
          },
          "creator_description": {
            "type": "string",
            "description": "creator description of the ip library"
          },
          "creator_avatar": {
            "type": "string",
            "description": "creator avatar of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "is public"
          },
          "token_is_delegating": {
            "type": "boolean",
            "description": "is delegating"
          },
          "ip_type": {
            "type": "string",
            "description": "ip type",
            "enum": [
              "official",
              "community"
            ]
          },
          "is_top": {
            "type": "boolean",
            "description": "is top"
          },
          "ip_level": {
            "type": "number",
            "description": "ip level, currently we support 3 level ip, so the value is 1, 2 or 3",
            "enum": [
              1,
              2,
              3
            ]
          },
          "creator_followers": {
            "type": "number",
            "description": "creator followers of the ip library"
          },
          "token_info": {
            "description": "token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ip_signature_clips": {
            "description": "signature clips of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSignatureClipDto"
            }
          },
          "meta_data": {
            "type": "object",
            "description": "meta data of the ip library"
          },
          "apps": {
            "description": "apps of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpBindAppsDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "description",
          "likes",
          "comments",
          "share_count",
          "is_user_liked",
          "cover_asset_id",
          "cover_image",
          "cover_hash",
          "on_chain_detail",
          "can_purchase",
          "creation_guide_lines",
          "governance_right",
          "creator_id",
          "creator",
          "creator_description",
          "creator_avatar",
          "is_public",
          "token_is_delegating",
          "ip_type",
          "is_top",
          "ip_level",
          "creator_followers",
          "token_info",
          "ip_signature_clips",
          "apps"
        ]
      },
      "IpLibraryDetailNoChildDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "likes": {
            "type": "number",
            "description": "likes of the ip library"
          },
          "comments": {
            "type": "number",
            "description": "comments of the ip library"
          },
          "share_count": {
            "type": "number",
            "description": "share count of the ip library"
          },
          "is_user_liked": {
            "type": "boolean",
            "description": "is liked by the user"
          },
          "cover_asset_id": {
            "type": "string",
            "description": "cover asset id of the ip library"
          },
          "cover_image": {
            "type": "string",
            "description": "cover images of the ip library"
          },
          "cover_hash": {
            "type": "string",
            "description": "cover ipfs hash of the ip library"
          },
          "on_chain_detail": {
            "description": "on chain detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnChainDetailDto"
              }
            ]
          },
          "can_purchase": {
            "type": "boolean",
            "description": "can purchase"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines"
          },
          "governance_right": {
            "type": "boolean",
            "description": "is governance right"
          },
          "creator_id": {
            "type": "string",
            "description": "creator id of the ip library"
          },
          "creator": {
            "type": "string",
            "description": "creator of the ip library"
          },
          "creator_description": {
            "type": "string",
            "description": "creator description of the ip library"
          },
          "creator_avatar": {
            "type": "string",
            "description": "creator avatar of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "is public"
          },
          "token_is_delegating": {
            "type": "boolean",
            "description": "is delegating"
          },
          "ip_type": {
            "type": "string",
            "description": "ip type",
            "enum": [
              "official",
              "community"
            ]
          },
          "is_top": {
            "type": "boolean",
            "description": "is top"
          },
          "ip_level": {
            "type": "number",
            "description": "ip level, currently we support 3 level ip, so the value is 1, 2 or 3",
            "enum": [
              1,
              2,
              3
            ]
          },
          "creator_followers": {
            "type": "number",
            "description": "creator followers of the ip library"
          },
          "token_info": {
            "description": "token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ip_signature_clips": {
            "description": "signature clips of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSignatureClipDto"
            }
          },
          "meta_data": {
            "type": "object",
            "description": "meta data of the ip library"
          },
          "apps": {
            "description": "apps of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpBindAppsDto"
            }
          },
          "genre": {
            "description": "genre of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "parent_ip_info": {
            "description": "parent ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryDto"
            }
          },
          "on_chain_status": {
            "type": "string",
            "description": "on chain status"
          },
          "extra_info": {
            "type": "object",
            "description": "extra info"
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "description",
          "likes",
          "comments",
          "share_count",
          "is_user_liked",
          "cover_asset_id",
          "cover_image",
          "cover_hash",
          "on_chain_detail",
          "can_purchase",
          "creation_guide_lines",
          "governance_right",
          "creator_id",
          "creator",
          "creator_description",
          "creator_avatar",
          "is_public",
          "token_is_delegating",
          "ip_type",
          "is_top",
          "ip_level",
          "creator_followers",
          "token_info",
          "ip_signature_clips",
          "apps",
          "genre",
          "parent_ip_info",
          "on_chain_status",
          "extra_info"
        ]
      },
      "UserWidgetSubscribedDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id"
          },
          "user": {
            "type": "string",
            "description": "user id"
          },
          "widget_tag": {
            "type": "string",
            "description": "widget tag"
          },
          "public_config": {
            "type": "object",
            "description": "public config"
          },
          "private_config": {
            "type": "object",
            "description": "private config"
          },
          "started_at": {
            "format": "date-time",
            "type": "string",
            "description": "subscription started at"
          },
          "expired_at": {
            "format": "date-time",
            "type": "string",
            "description": "subscription expired at"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "subscription created at"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "subscription updated at"
          },
          "subscription_id": {
            "type": "string",
            "description": "subscription id"
          }
        },
        "required": [
          "id",
          "user",
          "widget_tag",
          "public_config",
          "private_config",
          "started_at",
          "expired_at",
          "created_at",
          "updated_at",
          "subscription_id"
        ]
      },
      "AppWidgetsDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Widget Tag"
          },
          "configs": {
            "type": "object",
            "description": "Widget Configs"
          },
          "widget_detail": {
            "type": "object",
            "description": "Widget Detail"
          },
          "order": {
            "type": "number",
            "description": "Widget Order"
          },
          "enabled": {
            "type": "boolean",
            "description": "Widget Enabled"
          },
          "subscribed_detail": {
            "description": "Widget Subscribed Detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserWidgetSubscribedDetailDto"
              }
            ]
          }
        },
        "required": [
          "tag",
          "configs",
          "widget_detail",
          "order",
          "enabled",
          "subscribed_detail"
        ]
      },
      "AppIconDto": {
        "type": "object",
        "properties": {
          "icon192": {
            "type": "string",
            "description": "Icon 192*192"
          },
          "icon512": {
            "type": "string",
            "description": "Icon 512*512"
          }
        },
        "required": [
          "icon192",
          "icon512"
        ]
      },
      "ManifestDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enabled"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "theme_color": {
            "type": "string",
            "description": "Short Name"
          },
          "background_color": {
            "type": "string",
            "description": "Background Color"
          },
          "display": {
            "type": "string",
            "description": "Display"
          },
          "orientation": {
            "type": "string",
            "description": "Orientation"
          }
        },
        "required": [
          "enabled",
          "name",
          "description",
          "theme_color",
          "background_color",
          "display",
          "orientation"
        ]
      },
      "AppInfoDto": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "App ID"
          },
          "app_name": {
            "type": "string",
            "description": "App Name"
          },
          "description": {
            "type": "string",
            "description": "App Description"
          },
          "user_info": {
            "description": "User Info",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserInfoDTO"
              }
            ]
          },
          "ip_info": {
            "description": "IP Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpLibraryDetailNoChildDto"
              }
            ]
          },
          "is_admin": {
            "type": "boolean",
            "description": "Is Admin"
          },
          "usdc_mint": {
            "type": "string",
            "description": "USDC Mint"
          },
          "sub_domain": {
            "type": "string",
            "description": "Sub Domain"
          },
          "style_name": {
            "type": "string",
            "description": "Style Name"
          },
          "radius": {
            "type": "string",
            "description": "Radius"
          },
          "configs": {
            "type": "object",
            "description": "App configs, you can pass any configs you want"
          },
          "menus": {
            "description": "App menus",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "kline_url": {
            "type": "string",
            "description": "Kline URL"
          },
          "widgets": {
            "description": "Widgets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppWidgetsDto"
            }
          },
          "custom_sub_domain": {
            "type": "string",
            "description": "Custom Sub Domain"
          },
          "app_icons": {
            "description": "App Icon",
            "allOf": [
              {
                "$ref": "#/components/schemas/AppIconDto"
              }
            ]
          },
          "manifest": {
            "description": "Manifest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ManifestDto"
              }
            ]
          }
        },
        "required": [
          "app_id",
          "user_info",
          "ip_info",
          "is_admin",
          "usdc_mint",
          "sub_domain",
          "style_name",
          "radius",
          "menus",
          "kline_url",
          "widgets",
          "custom_sub_domain",
          "app_icons",
          "manifest"
        ]
      },
      "ApproveCreatorDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the creator to approve",
            "example": "johndoe@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ApproveCreatorResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message to display to the user",
            "example": "Creator has been approved successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "AddInviteEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Invite email, this email will be used to invite users to create app permission",
            "example": "johndoe@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "RemoveInviteEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Invite email, this email will be used to invite users to create app permission",
            "example": "johndoe@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email"
          },
          "timestamp": {
            "type": "number",
            "description": "Timestamp"
          },
          "app_id": {
            "type": "string",
            "description": "App id"
          },
          "sign": {
            "type": "string",
            "description": "Signature"
          }
        },
        "required": [
          "email",
          "timestamp",
          "app_id",
          "sign"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token"
          }
        },
        "required": [
          "token"
        ]
      },
      "CheckTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token"
          },
          "device_id": {
            "type": "string",
            "description": "Device id"
          }
        },
        "required": [
          "token",
          "device_id"
        ]
      },
      "CheckTokenResponseDto": {
        "type": "object",
        "properties": {
          "is_bind": {
            "type": "boolean",
            "description": "Is bind app"
          },
          "access_token": {
            "type": "string",
            "description": "Access token"
          },
          "host": {
            "type": "string",
            "description": "Host"
          },
          "email": {
            "type": "string",
            "description": "Email"
          }
        },
        "required": [
          "is_bind",
          "access_token",
          "host",
          "email"
        ]
      },
      "GetBindCodeDto": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host"
          },
          "email": {
            "type": "string",
            "description": "Email"
          },
          "app_id": {
            "type": "string",
            "description": "App id"
          }
        },
        "required": [
          "host",
          "email",
          "app_id"
        ]
      },
      "GetBindCodeResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success"
          },
          "message": {
            "type": "string",
            "description": "Message"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "ConfirmBindDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email"
          },
          "code": {
            "type": "string",
            "description": "Code"
          },
          "app_id": {
            "type": "string",
            "description": "App id"
          },
          "host": {
            "type": "string",
            "description": "Host"
          },
          "device_id": {
            "type": "string",
            "description": "Device id"
          }
        },
        "required": [
          "email",
          "code",
          "app_id",
          "host",
          "device_id"
        ]
      },
      "ConfirmBindResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success"
          },
          "access_token": {
            "type": "string",
            "description": "Access token"
          }
        },
        "required": [
          "success",
          "access_token"
        ]
      },
      "DeveloperWidgetCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the widget",
            "example": "My Widget"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the widget",
            "example": "This is a widget"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget",
            "example": "This is a widget"
          },
          "category": {
            "type": "string",
            "description": "The category of the widget",
            "example": "My Widget"
          },
          "widget_url": {
            "type": "string",
            "description": "The URL of the widget",
            "example": "http://localhost:4290/create"
          },
          "management_url": {
            "type": "string",
            "description": "The URL of the widget management",
            "example": "http://localhost:4290/management"
          },
          "demo_url": {
            "type": "string",
            "description": "The URL of the widget demo",
            "example": "http://localhost:4290/demo"
          },
          "repository_url": {
            "type": "string",
            "description": "The URL of the widget repository",
            "example": "https://github.com/my-widget"
          },
          "is_private": {
            "type": "boolean",
            "description": "Whether the widget is private",
            "example": false
          },
          "test_users": {
            "description": "The test users of the widget, max 10 users",
            "example": [
              "test1@giggle.pro",
              "test2@giggle.pro"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "summary",
          "description",
          "category",
          "widget_url",
          "management_url",
          "demo_url",
          "repository_url",
          "is_private",
          "test_users"
        ]
      },
      "WidgetSettingsDto": {
        "type": "object",
        "properties": {
          "widget_tag": {
            "type": "string",
            "description": "widget tag"
          },
          "management_url": {
            "type": "string",
            "description": "management url"
          },
          "widget_url": {
            "type": "string",
            "description": "widget url"
          },
          "metadata": {
            "type": "object",
            "description": "metadata"
          },
          "repository_url": {
            "type": "string",
            "description": "repository url"
          },
          "permissions": {
            "type": "string",
            "description": "permissions",
            "enum": [
              "read_ip",
              "manage_ip",
              "read_portal",
              "manage_portal",
              "get_user_info",
              "manage_wallet"
            ]
          },
          "type": {
            "type": "string",
            "description": "type",
            "enum": [
              "iframe",
              "system"
            ]
          }
        },
        "required": [
          "widget_tag",
          "management_url",
          "widget_url",
          "metadata",
          "repository_url",
          "permissions",
          "type"
        ]
      },
      "AuthorInfoDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "widget author username"
          },
          "avatar": {
            "type": "string",
            "description": "widget author avatar"
          }
        },
        "required": [
          "username",
          "avatar"
        ]
      },
      "UserWidgetSubscribedResponseDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "user id"
          },
          "widget_tag": {
            "type": "string",
            "description": "widget tag"
          },
          "public_config": {
            "type": "object",
            "description": "public config"
          },
          "private_config": {
            "type": "object",
            "description": "private config"
          },
          "started_at": {
            "format": "date-time",
            "type": "string",
            "description": "subscription started at"
          },
          "expired_at": {
            "format": "date-time",
            "type": "string",
            "description": "subscription expired at"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "subscription created at"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "subscription updated at"
          },
          "subscription_id": {
            "type": "string",
            "description": "subscription id"
          }
        },
        "required": [
          "user",
          "widget_tag",
          "public_config",
          "private_config",
          "started_at",
          "expired_at",
          "created_at",
          "updated_at",
          "subscription_id"
        ]
      },
      "WidgetIpInfoDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "ip id"
          },
          "name": {
            "type": "string",
            "description": "ip name"
          },
          "ticker": {
            "type": "string",
            "description": "ip ticker"
          },
          "mint": {
            "type": "string",
            "description": "ip mint"
          },
          "market_cap": {
            "type": "string",
            "description": "ip market cap"
          },
          "trade_volume": {
            "type": "string",
            "description": "ip trade volume"
          },
          "price": {
            "type": "string",
            "description": "ip price"
          },
          "cover": {
            "type": "string",
            "description": "ip cover"
          },
          "change_5m": {
            "type": "string",
            "description": "ip price change 5m"
          },
          "change_1h": {
            "type": "string",
            "description": "ip price change 1h"
          },
          "change_1d": {
            "type": "string",
            "description": "ip price change 1d"
          },
          "trade24hSol": {
            "type": "string",
            "description": "ip trade volume 24h in sol"
          },
          "child_ips": {
            "description": "ip child ips",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetIpInfoDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "mint",
          "market_cap",
          "trade_volume",
          "price",
          "cover",
          "change_5m",
          "change_1h",
          "change_1d",
          "trade24hSol"
        ]
      },
      "WidgetBindAppDto": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "app id"
          },
          "ip_id": {
            "type": "number",
            "description": "ip id"
          },
          "ip_info": {
            "description": "ip summary",
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetIpInfoDto"
              }
            ]
          }
        },
        "required": [
          "app_id",
          "ip_id",
          "ip_info"
        ]
      },
      "WidgetDetailDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "name": {
            "type": "string",
            "description": "widget name"
          },
          "summary": {
            "type": "string",
            "description": "widget summary"
          },
          "pricing": {
            "type": "object",
            "description": "widget pricing"
          },
          "settings": {
            "description": "widget settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetSettingsDto"
              }
            ]
          },
          "is_featured": {
            "type": "boolean",
            "description": "widget is featured"
          },
          "is_new": {
            "type": "boolean",
            "description": "widget is new"
          },
          "is_official": {
            "type": "boolean",
            "description": "widget is official"
          },
          "category": {
            "type": "string",
            "description": "widget category"
          },
          "icon": {
            "type": "string",
            "description": "widget icon"
          },
          "description": {
            "type": "string",
            "description": "widget description"
          },
          "coming_soon": {
            "type": "boolean",
            "description": "widget coming soon"
          },
          "priority": {
            "type": "number",
            "description": "widget priority"
          },
          "demo_url": {
            "type": "string",
            "description": "widget demo url"
          },
          "subscribers": {
            "type": "number",
            "description": "widget subscribers"
          },
          "is_subscribed": {
            "type": "boolean",
            "description": "widget is subscribed"
          },
          "author_info": {
            "description": "widget author info",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorInfoDto"
              }
            ]
          },
          "subscribed_detail": {
            "description": "widget subscribed detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserWidgetSubscribedResponseDto"
              }
            ]
          },
          "bind_apps": {
            "description": "widget bind app info",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetBindAppDto"
            }
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "widget created at"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "widget updated at"
          },
          "test_users": {
            "description": "widget test users",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tag",
          "name",
          "settings",
          "is_featured",
          "is_new",
          "is_official",
          "category",
          "icon",
          "description",
          "coming_soon",
          "priority",
          "demo_url",
          "subscribers",
          "is_subscribed",
          "author_info",
          "subscribed_detail",
          "bind_apps",
          "created_at",
          "updated_at",
          "test_users"
        ]
      },
      "DeveloperWidgetUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the widget",
            "example": "My Widget"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the widget",
            "example": "This is a widget"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget",
            "example": "This is a widget"
          },
          "category": {
            "type": "string",
            "description": "The category of the widget",
            "example": "My Widget"
          },
          "widget_url": {
            "type": "string",
            "description": "The URL of the widget",
            "example": "http://localhost:4290/create"
          },
          "management_url": {
            "type": "string",
            "description": "The URL of the widget management",
            "example": "http://localhost:4290/management"
          },
          "demo_url": {
            "type": "string",
            "description": "The URL of the widget demo",
            "example": "http://localhost:4290/demo"
          },
          "repository_url": {
            "type": "string",
            "description": "The URL of the widget repository",
            "example": "https://github.com/my-widget"
          },
          "is_private": {
            "type": "boolean",
            "description": "Whether the widget is private",
            "example": false
          },
          "test_users": {
            "description": "The test users of the widget, max 10 users",
            "example": [
              "test1@giggle.pro",
              "test2@giggle.pro"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tag": {
            "type": "string",
            "description": "The tag of the widget",
            "example": "my-widget"
          }
        },
        "required": [
          "name",
          "summary",
          "description",
          "category",
          "widget_url",
          "management_url",
          "demo_url",
          "repository_url",
          "is_private",
          "test_users",
          "tag"
        ]
      },
      "DeveloperWidgetDeleteDto": {
        "type": "object",
        "properties": {}
      },
      "DeveloperWidgetDeleteResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the widget deletion",
            "example": "success"
          }
        },
        "required": [
          "status"
        ]
      },
      "WidgetIdentityDto": {
        "type": "object",
        "properties": {
          "access_key": {
            "type": "string",
            "description": "The access key of the widget",
            "example": "1234567890"
          },
          "secret_key": {
            "type": "string",
            "description": "The secret key of the widget",
            "example": "1234567890"
          }
        },
        "required": [
          "access_key",
          "secret_key"
        ]
      },
      "RequestWidgetAccessTokenDto": {
        "type": "object",
        "properties": {
          "access_key": {
            "type": "string",
            "description": "The access key of the widget",
            "example": "1234567890"
          },
          "secret_key": {
            "type": "string",
            "description": "The secret key of the widget",
            "example": "1234567890"
          }
        },
        "required": [
          "access_key",
          "secret_key"
        ]
      },
      "WidgetAccessTokenDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token of the widget",
            "example": "1234567890"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "NationCodeItemDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the nation",
            "example": "+1"
          },
          "name": {
            "type": "string",
            "description": "The name of the nation",
            "example": "United States"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "NationCodeDto": {
        "type": "object",
        "properties": {
          "countries": {
            "description": "The nation codes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NationCodeItemDto"
            }
          }
        },
        "required": [
          "countries"
        ]
      },
      "GetUserTokenDto": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "user id, user_id and email are mutually exclusive"
          },
          "email": {
            "type": "string",
            "description": "email, user_id and email are mutually exclusive"
          },
          "app_id": {
            "type": "string",
            "description": "email"
          }
        },
        "required": [
          "app_id"
        ]
      },
      "CreateLinkRequestDto": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "The link of the share, if target is link"
          },
          "widget_message": {
            "type": "string",
            "description": "The message of the share, if target is widget",
            "maxLength": 2048
          },
          "enable_login": {
            "type": "boolean",
            "description": "enable login on the portal, when you set this to true, the portal will enable login whatever the login_from_external is enabled or not"
          },
          "link_pic": {
            "type": "string",
            "description": "The og-picture of the link, it will be used as the og-picture of the link"
          }
        }
      },
      "CreateLinkResponseDto": {
        "type": "object",
        "properties": {
          "link_id": {
            "type": "string",
            "description": "The id of the link"
          },
          "short_link": {
            "type": "string",
            "description": "Short link of url"
          },
          "enable_login": {
            "type": "boolean",
            "description": "The enable login of the link"
          },
          "link_pic": {
            "type": "string",
            "description": "The og-picture of the link"
          }
        },
        "required": [
          "link_id",
          "short_link",
          "enable_login",
          "link_pic"
        ]
      },
      "BindDeviceRequestDto": {
        "type": "object",
        "properties": {
          "device_id": {
            "type": "string",
            "description": "The device id of the user"
          },
          "link_id": {
            "type": "string",
            "description": "The link id of the user"
          },
          "link_pic": {
            "type": "string",
            "description": "The link pic of the link"
          }
        },
        "required": [
          "device_id",
          "link_id",
          "link_pic"
        ]
      },
      "LinkStatisticsDto": {
        "type": "object",
        "properties": {
          "bind_device_count": {
            "type": "number",
            "description": "bind device count"
          },
          "invited_new_user_count": {
            "type": "number",
            "description": "invited new user count"
          }
        },
        "required": [
          "bind_device_count",
          "invited_new_user_count"
        ]
      },
      "LinkDetailDto": {
        "type": "object",
        "properties": {
          "link_id": {
            "type": "string",
            "description": "The id of the link"
          },
          "short_link": {
            "type": "string",
            "description": "short link"
          },
          "enable_login": {
            "type": "boolean",
            "description": "The enable login of the link"
          },
          "link_pic": {
            "type": "string",
            "description": "The og-picture url of the link"
          },
          "creator": {
            "description": "The creator of the link",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkCreatorDto"
              }
            ]
          },
          "redirect_to_widget": {
            "type": "string",
            "description": "The widget tag of the link"
          },
          "widget_message": {
            "type": "string",
            "description": "The widget message of the link"
          },
          "redirect_to_link": {
            "type": "string",
            "description": "The link of the link"
          },
          "app_id": {
            "type": "string",
            "description": "The app id of the link"
          },
          "app_info": {
            "description": "The app info of the link",
            "allOf": [
              {
                "$ref": "#/components/schemas/AppInfoDto"
              }
            ]
          },
          "statistics": {
            "description": "The statistics of the link",
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkStatisticsDto"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The created at of the link"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The updated at of the link"
          }
        },
        "required": [
          "link_id",
          "short_link",
          "enable_login",
          "link_pic",
          "creator",
          "redirect_to_widget",
          "widget_message",
          "redirect_to_link",
          "app_id",
          "app_info",
          "statistics",
          "created_at",
          "updated_at"
        ]
      },
      "UserLinkStatisticsDto": {
        "type": "object",
        "properties": {
          "bind_device_count": {
            "type": "number",
            "description": "bind device count"
          },
          "invited_new_user_count": {
            "type": "number",
            "description": "invited new user count"
          },
          "link_count": {
            "type": "number",
            "description": "link count"
          }
        },
        "required": [
          "bind_device_count",
          "invited_new_user_count",
          "link_count"
        ]
      },
      "IpSummaryWithChildDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "likes": {
            "type": "number",
            "description": "likes of the ip library"
          },
          "comments": {
            "type": "number",
            "description": "comments of the ip library"
          },
          "share_count": {
            "type": "number",
            "description": "share count of the ip library"
          },
          "is_user_liked": {
            "type": "boolean",
            "description": "is liked by the user"
          },
          "cover_asset_id": {
            "type": "string",
            "description": "cover asset id of the ip library"
          },
          "cover_image": {
            "type": "string",
            "description": "cover images of the ip library"
          },
          "cover_hash": {
            "type": "string",
            "description": "cover ipfs hash of the ip library"
          },
          "on_chain_detail": {
            "description": "on chain detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnChainDetailDto"
              }
            ]
          },
          "can_purchase": {
            "type": "boolean",
            "description": "can purchase"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines"
          },
          "governance_right": {
            "type": "boolean",
            "description": "is governance right"
          },
          "creator_id": {
            "type": "string",
            "description": "creator id of the ip library"
          },
          "creator": {
            "type": "string",
            "description": "creator of the ip library"
          },
          "creator_description": {
            "type": "string",
            "description": "creator description of the ip library"
          },
          "creator_avatar": {
            "type": "string",
            "description": "creator avatar of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "is public"
          },
          "token_is_delegating": {
            "type": "boolean",
            "description": "is delegating"
          },
          "ip_type": {
            "type": "string",
            "description": "ip type",
            "enum": [
              "official",
              "community"
            ]
          },
          "is_top": {
            "type": "boolean",
            "description": "is top"
          },
          "ip_level": {
            "type": "number",
            "description": "ip level, currently we support 3 level ip, so the value is 1, 2 or 3",
            "enum": [
              1,
              2,
              3
            ]
          },
          "creator_followers": {
            "type": "number",
            "description": "creator followers of the ip library"
          },
          "token_info": {
            "description": "token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ip_signature_clips": {
            "description": "signature clips of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSignatureClipDto"
            }
          },
          "meta_data": {
            "type": "object",
            "description": "meta data of the ip library"
          },
          "apps": {
            "description": "apps of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpBindAppsDto"
            }
          },
          "child_ip_info": {
            "description": "child ip library, only return 100 items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "description",
          "likes",
          "comments",
          "share_count",
          "is_user_liked",
          "cover_asset_id",
          "cover_image",
          "cover_hash",
          "on_chain_detail",
          "can_purchase",
          "creation_guide_lines",
          "governance_right",
          "creator_id",
          "creator",
          "creator_description",
          "creator_avatar",
          "is_public",
          "token_is_delegating",
          "ip_type",
          "is_top",
          "ip_level",
          "creator_followers",
          "token_info",
          "ip_signature_clips",
          "apps",
          "child_ip_info"
        ]
      },
      "IpLibraryListDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "ip libraries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryWithChildDto"
            }
          },
          "count": {
            "type": "number",
            "description": "total count of ip libraries"
          }
        },
        "required": [
          "data",
          "count"
        ]
      },
      "IpNameCheckDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          }
        },
        "required": [
          "name",
          "ticker"
        ]
      },
      "AddShareCountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "IpLibraryDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "likes": {
            "type": "number",
            "description": "likes of the ip library"
          },
          "comments": {
            "type": "number",
            "description": "comments of the ip library"
          },
          "share_count": {
            "type": "number",
            "description": "share count of the ip library"
          },
          "is_user_liked": {
            "type": "boolean",
            "description": "is liked by the user"
          },
          "cover_asset_id": {
            "type": "string",
            "description": "cover asset id of the ip library"
          },
          "cover_image": {
            "type": "string",
            "description": "cover images of the ip library"
          },
          "cover_hash": {
            "type": "string",
            "description": "cover ipfs hash of the ip library"
          },
          "on_chain_detail": {
            "description": "on chain detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnChainDetailDto"
              }
            ]
          },
          "can_purchase": {
            "type": "boolean",
            "description": "can purchase"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines"
          },
          "governance_right": {
            "type": "boolean",
            "description": "is governance right"
          },
          "creator_id": {
            "type": "string",
            "description": "creator id of the ip library"
          },
          "creator": {
            "type": "string",
            "description": "creator of the ip library"
          },
          "creator_description": {
            "type": "string",
            "description": "creator description of the ip library"
          },
          "creator_avatar": {
            "type": "string",
            "description": "creator avatar of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "is public"
          },
          "token_is_delegating": {
            "type": "boolean",
            "description": "is delegating"
          },
          "ip_type": {
            "type": "string",
            "description": "ip type",
            "enum": [
              "official",
              "community"
            ]
          },
          "is_top": {
            "type": "boolean",
            "description": "is top"
          },
          "ip_level": {
            "type": "number",
            "description": "ip level, currently we support 3 level ip, so the value is 1, 2 or 3",
            "enum": [
              1,
              2,
              3
            ]
          },
          "creator_followers": {
            "type": "number",
            "description": "creator followers of the ip library"
          },
          "token_info": {
            "description": "token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ip_signature_clips": {
            "description": "signature clips of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSignatureClipDto"
            }
          },
          "meta_data": {
            "type": "object",
            "description": "meta data of the ip library"
          },
          "apps": {
            "description": "apps of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpBindAppsDto"
            }
          },
          "genre": {
            "description": "genre of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "parent_ip_info": {
            "description": "parent ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryDto"
            }
          },
          "child_ip_info": {
            "description": "child ip library, only return 100 items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryDto"
            }
          },
          "on_chain_status": {
            "type": "string",
            "description": "on chain status"
          },
          "extra_info": {
            "type": "object",
            "description": "extra info"
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "description",
          "likes",
          "comments",
          "share_count",
          "is_user_liked",
          "cover_asset_id",
          "cover_image",
          "cover_hash",
          "on_chain_detail",
          "can_purchase",
          "creation_guide_lines",
          "governance_right",
          "creator_id",
          "creator",
          "creator_description",
          "creator_avatar",
          "is_public",
          "token_is_delegating",
          "ip_type",
          "is_top",
          "ip_level",
          "creator_followers",
          "token_info",
          "ip_signature_clips",
          "apps",
          "genre",
          "parent_ip_info",
          "child_ip_info",
          "on_chain_status",
          "extra_info"
        ]
      },
      "LikeIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "UnlikeIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "AvailableParentIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "children": {
            "description": "children of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableParentIpDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "children"
        ]
      },
      "PurchasedIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          }
        },
        "required": [
          "id",
          "name",
          "ticker"
        ]
      },
      "AvailableParentIpsDto": {
        "type": "object",
        "properties": {
          "owned": {
            "description": "owned ip libraries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableParentIpDto"
            }
          },
          "purchased": {
            "description": "purchased ip libraries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasedIpDto"
            }
          }
        },
        "required": [
          "owned",
          "purchased"
        ]
      },
      "SetVisibilityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "visibility of the ip library"
          }
        },
        "required": [
          "id",
          "is_public"
        ]
      },
      "UntokenizeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateIpDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "genre": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "image_id": {
            "type": "string",
            "description": "asset id of the ip cover image"
          },
          "video_id": {
            "type": "string",
            "description": "asset id of the video"
          },
          "meta_data": {
            "type": "object",
            "description": "meta data"
          },
          "parent_ip_library_id": {
            "type": "number",
            "description": "id of the parent ip library"
          },
          "twitter": {
            "type": "string",
            "description": "twitter of the ip holder"
          },
          "website": {
            "type": "string",
            "description": "website of the ip holder"
          },
          "telegram": {
            "type": "string",
            "description": "telegram of the ip holder"
          },
          "tiktok": {
            "type": "string",
            "description": "tiktok of the ip holder"
          },
          "instagram": {
            "type": "string",
            "description": "instagram of the ip holder"
          }
        },
        "required": [
          "name",
          "ticker",
          "description",
          "image_id"
        ]
      },
      "EditIpDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "genre": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "image_id": {
            "type": "string",
            "description": "asset id of the ip cover image"
          },
          "video_id": {
            "type": "string",
            "description": "asset id of the video"
          },
          "meta_data": {
            "type": "object",
            "description": "meta data"
          },
          "twitter": {
            "type": "string",
            "description": "twitter of the ip holder"
          },
          "website": {
            "type": "string",
            "description": "website of the ip holder"
          },
          "telegram": {
            "type": "string",
            "description": "telegram of the ip holder"
          },
          "tiktok": {
            "type": "string",
            "description": "tiktok of the ip holder"
          },
          "instagram": {
            "type": "string",
            "description": "instagram of the ip holder"
          },
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "description",
          "image_id",
          "id"
        ]
      },
      "PurchaseStrategyDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of the purchase strategy",
            "enum": [
              "direct",
              "agent",
              "none"
            ]
          },
          "percentage": {
            "type": "number",
            "description": "percentage of the purchase strategy"
          },
          "prompt": {
            "type": "string",
            "description": "prompt of the purchase strategy"
          },
          "agent_id": {
            "type": "string",
            "description": "agent id of the purchase strategy"
          },
          "wallet_source": {
            "type": "string",
            "description": "source wallet type of the purchase strategy, default is giggle",
            "enum": [
              "agent",
              "giggle"
            ]
          },
          "strategy_detail": {
            "type": "object",
            "description": "strategy detail of the purchase strategy"
          }
        },
        "required": [
          "type",
          "percentage",
          "prompt",
          "agent_id",
          "wallet_source"
        ]
      },
      "LaunchIpTokenDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "purchase_strategy": {
            "description": "purchase strategy of the ip library",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurchaseStrategyDto"
              }
            ]
          }
        },
        "required": [
          "ip_id",
          "purchase_strategy"
        ]
      },
      "EventDto": {
        "type": "object",
        "properties": {
          "order": {
            "type": "number",
            "description": "order of the step"
          },
          "event": {
            "type": "string",
            "description": "id of the step"
          },
          "label": {
            "type": "string",
            "description": "label of the step"
          },
          "summary": {
            "type": "string",
            "description": "summary of the step"
          },
          "is_progress": {
            "type": "boolean",
            "description": "is progress"
          },
          "is_completed": {
            "type": "boolean",
            "description": "is completed"
          }
        },
        "required": [
          "order",
          "event",
          "label",
          "summary",
          "is_progress",
          "is_completed"
        ]
      },
      "SSEMessage": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "event of the message",
            "enum": [
              "ip.creation_steps",
              "ip.data_validating",
              "ip.asset_to_ipfs",
              "ip.token_creating",
              "ip.token_creating_reward_pool",
              "ip.start_launch_agent.starting",
              "ip.start_launch_agent.calculate_cost",
              "ip.start_launch_agent.check_balance",
              "ip.start_launch_agent.swap_sol",
              "ip.start_launch_agent.transfer_sol",
              "ip.start_launch_agent.transfer_usdc",
              "ip.start_launch_agent.start_agent",
              "ip.start_launch_agent.agent_started",
              "ip.updated",
              "ip.token_created_on_chain",
              "ip.warning"
            ]
          },
          "data": {
            "type": "object",
            "description": "data of the message"
          },
          "event_detail": {
            "description": "event detail of the message",
            "allOf": [
              {
                "$ref": "#/components/schemas/EventDto"
              }
            ]
          }
        },
        "required": [
          "event"
        ]
      },
      "RemoveIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "RemoveIpResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "success of the ip removal"
          }
        },
        "required": [
          "success"
        ]
      },
      "DelegateIpTokenDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "number",
            "description": "ip id"
          },
          "market_maker_id": {
            "type": "number",
            "description": "market maker id"
          }
        },
        "required": [
          "ip_id",
          "market_maker_id"
        ]
      },
      "CreateAnnouncementDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "number",
            "description": "Ip id"
          },
          "title": {
            "type": "string",
            "description": "Title of the announcement"
          },
          "description": {
            "type": "string",
            "description": "Content of the announcement"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "Cover asset id"
          },
          "video_asset_id": {
            "type": "number",
            "description": "Video asset id"
          }
        },
        "required": [
          "ip_id",
          "title",
          "description"
        ]
      },
      "AnnouncementDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id"
          },
          "ip_id": {
            "type": "number",
            "description": "Ip id"
          },
          "title": {
            "type": "string",
            "description": "Title of the announcement"
          },
          "description": {
            "type": "string",
            "description": "Content of the announcement"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "Cover asset id"
          },
          "video_asset_id": {
            "type": "number",
            "description": "Video asset id"
          },
          "creator": {
            "type": "string",
            "description": "Creator"
          },
          "cover_key": {
            "type": "string",
            "description": "Cover key"
          },
          "video_key": {
            "type": "string",
            "description": "Video key"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at"
          },
          "cover_url": {
            "type": "string",
            "description": "Cover url"
          },
          "video_url": {
            "type": "string",
            "description": "Video url"
          }
        },
        "required": [
          "id",
          "ip_id",
          "title",
          "description",
          "creator",
          "created_at",
          "updated_at"
        ]
      },
      "AnnouncementListDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Announcement list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnnouncementDetailDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of announcements"
          }
        },
        "required": [
          "data",
          "total"
        ]
      },
      "UpdateAnnouncementDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id"
          },
          "title": {
            "type": "string",
            "description": "Title of the announcement"
          },
          "description": {
            "type": "string",
            "description": "Content of the announcement"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "Cover asset id"
          },
          "video_asset_id": {
            "type": "number",
            "description": "Video asset id"
          }
        },
        "required": [
          "id",
          "title",
          "description"
        ]
      },
      "DeleteAnnouncementDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeleteAnnouncementResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success"
          }
        },
        "required": [
          "success"
        ]
      },
      "CreateCommentDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "reply_post_id": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "ip_id",
          "content"
        ]
      },
      "DeleteCommentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "LikeCommentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "UnlikeCommentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateIpOrderDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "genre": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "image_id": {
            "type": "string",
            "description": "asset id of the ip cover image"
          },
          "video_id": {
            "type": "string",
            "description": "asset id of the video"
          },
          "meta_data": {
            "type": "object",
            "description": "meta data"
          },
          "parent_ip_library_id": {
            "type": "number",
            "description": "id of the parent ip library"
          },
          "twitter": {
            "type": "string",
            "description": "twitter of the ip holder"
          },
          "website": {
            "type": "string",
            "description": "website of the ip holder"
          },
          "telegram": {
            "type": "string",
            "description": "telegram of the ip holder"
          },
          "tiktok": {
            "type": "string",
            "description": "tiktok of the ip holder"
          },
          "instagram": {
            "type": "string",
            "description": "instagram of the ip holder"
          },
          "redirect_url": {
            "type": "string",
            "description": "redirect url if order is successful"
          }
        },
        "required": [
          "name",
          "ticker",
          "description",
          "image_id",
          "redirect_url"
        ]
      },
      "CheckIpOrderDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The id of the order"
          },
          "creation_data": {
            "description": "The creation data of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpDto"
              }
            ]
          },
          "ip_create_status": {
            "type": "string",
            "description": "The status of the order",
            "enum": [
              "pending",
              "creating",
              "created",
              "failed"
            ]
          },
          "order_info": {
            "description": "The info of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderDetailDto"
              }
            ]
          }
        },
        "required": [
          "order_id",
          "creation_data",
          "ip_create_status",
          "order_info"
        ]
      },
      "CheckIpOrderListDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "The total number of the orders"
          },
          "orders": {
            "description": "The list of the orders",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckIpOrderDto"
            }
          }
        },
        "required": [
          "total",
          "orders"
        ]
      },
      "OrderRanksResponseDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the user"
          },
          "avatar": {
            "type": "string",
            "description": "The avatar of the user"
          },
          "rank": {
            "type": "number",
            "description": "The rank of the user"
          },
          "duration": {
            "type": "number",
            "description": "The total duration of the ip creation"
          }
        },
        "required": [
          "username",
          "avatar",
          "rank",
          "duration"
        ]
      },
      "GenerateBlueprintDto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "Natural language description of the ip blueprint"
          },
          "email": {
            "type": "string",
            "description": "Email of the user, sending the blueprint to the user"
          }
        },
        "required": [
          "prompt",
          "email"
        ]
      },
      "BlueprintResponseDto": {
        "type": "object",
        "properties": {}
      },
      "CancelIpDelegationDto": {
        "type": "object",
        "properties": {
          "delegation_id": {
            "type": "number"
          }
        },
        "required": [
          "delegation_id"
        ]
      },
      "ListMarketMakerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "nickname": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "nickname"
        ]
      },
      "ListMarketMakerResponseByAdminDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "nickname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "nickname",
          "email"
        ]
      },
      "CreateMarketMakerDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "nickname"
        ]
      },
      "DeleteMarketMakerDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "LaunchIpTokenByMarketMakerDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "purchase_strategy": {
            "description": "purchase strategy of the ip library",
            "allOf": [
              {
                "$ref": "#/components/schemas/PurchaseStrategyDto"
              }
            ]
          },
          "delegation_id": {
            "type": "number",
            "description": "id of the delegation"
          }
        },
        "required": [
          "ip_id",
          "purchase_strategy",
          "delegation_id"
        ]
      },
      "WidgetSummaryDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "name": {
            "type": "string",
            "description": "widget name"
          },
          "summary": {
            "type": "string",
            "description": "widget summary"
          },
          "pricing": {
            "type": "object",
            "description": "widget pricing"
          },
          "settings": {
            "description": "widget settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetSettingsDto"
              }
            ]
          },
          "is_featured": {
            "type": "boolean",
            "description": "widget is featured"
          },
          "is_new": {
            "type": "boolean",
            "description": "widget is new"
          },
          "is_official": {
            "type": "boolean",
            "description": "widget is official"
          },
          "category": {
            "type": "string",
            "description": "widget category"
          },
          "icon": {
            "type": "string",
            "description": "widget icon"
          },
          "description": {
            "type": "string",
            "description": "widget description"
          },
          "coming_soon": {
            "type": "boolean",
            "description": "widget coming soon"
          },
          "priority": {
            "type": "number",
            "description": "widget priority"
          },
          "demo_url": {
            "type": "string",
            "description": "widget demo url"
          },
          "subscribers": {
            "type": "number",
            "description": "widget subscribers"
          },
          "is_subscribed": {
            "type": "boolean",
            "description": "widget is subscribed"
          },
          "author_info": {
            "description": "widget author info",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorInfoDto"
              }
            ]
          },
          "subscribed_detail": {
            "description": "widget subscribed detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserWidgetSubscribedResponseDto"
              }
            ]
          },
          "bind_apps": {
            "description": "widget bind app info",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetBindAppDto"
            }
          }
        },
        "required": [
          "tag",
          "name",
          "settings",
          "is_featured",
          "is_new",
          "is_official",
          "category",
          "icon",
          "description",
          "coming_soon",
          "priority",
          "demo_url",
          "subscribers",
          "is_subscribed",
          "author_info",
          "subscribed_detail",
          "bind_apps"
        ]
      },
      "WidgetListResponseDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "total records"
          },
          "widgets": {
            "description": "widgets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetSummaryDto"
            }
          }
        },
        "required": [
          "total",
          "widgets"
        ]
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Apps",
      "tags": [
        "IP Portal",
        "Widgets"
      ]
    },
    {
      "name": "IP Management",
      "tags": [
        "IP Library",
        "Announcement",
        "Comments",
        "Link",
        "Market Maker"
      ]
    },
    {
      "name": "Account",
      "tags": [
        "Profile",
        "User Wallet",
        "Assets"
      ]
    },
    {
      "name": "Payment",
      "tags": [
        "Order",
        "Credit"
      ]
    },
    {
      "name": "Web3",
      "tags": [
        "IP Tokens",
        "Web3 Tools",
        "Nfts"
      ]
    },
    {
      "name": "Developer Utility",
      "tags": [
        "Developer Utility"
      ]
    }
  ]
}