{
  "openapi": "3.1.1",
  "paths": {
    "/api/v1/user/profile": {
      "get": {
        "operationId": "UserController_profile",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoDTO"
                }
              }
            }
          }
        },
        "summary": "Get user profile",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/user/web3-wallet": {
      "get": {
        "description": "Get user web3 wallet info, including total balance, ip total market cap, ip license incomes, etc...",
        "operationId": "UserController_walletDetail",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mint",
            "required": false,
            "in": "query",
            "description": "mint address of token to query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWalletDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user web3 wallet info",
        "tags": [
          "User",
          "User Wallet"
        ]
      }
    },
    "/api/v1/user/update": {
      "post": {
        "description": "update username and description",
        "operationId": "UserController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileReqDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Update user profile",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/user/follow": {
      "post": {
        "description": "follow a user",
        "operationId": "UserController_follow",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFollowDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Follow a user",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/user/unfollow": {
      "post": {
        "description": "unfollow a user",
        "operationId": "UserController_unfollow",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUnFollowDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Unfollow a user",
        "tags": [
          "User",
          "Profile"
        ]
      }
    },
    "/api/v1/auth/loginWithCode": {
      "post": {
        "operationId": "AuthController_loginWithCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginWithCodeReqDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDTO"
                }
              }
            }
          }
        },
        "summary": "Login with code",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/web3/giggle/get-ip-token-list": {
      "get": {
        "operationId": "GiggleController_getIpTokenList",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "site",
            "required": false,
            "in": "query",
            "description": "site of the ip token, '' to get all ip tokens",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mint",
            "required": false,
            "in": "query",
            "description": "mint address of the ip token, use comma to split",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addr",
            "required": false,
            "in": "query",
            "description": "user wallet address of the ip token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIpTokenListResponseDto"
                }
              }
            }
          }
        },
        "summary": "Query IP tokens",
        "tags": [
          "Giggle",
          "IP Tokens"
        ]
      }
    },
    "/api/v1/web3/giggle/trade": {
      "post": {
        "operationId": "GiggleController_trade",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Trade IP Token",
        "tags": [
          "Giggle",
          "User Wallet"
        ]
      }
    },
    "/api/v1/web3/price/percentage-to-credits/{percentage}": {
      "get": {
        "description": "Convert a percentage to the price of the ip token when create ip token, percentage must be between 1 and 98",
        "operationId": "PriceController_getPercentageToCredits",
        "parameters": [
          {
            "name": "percentage",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The price of the ip token when create ip token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PercentageToCreditsDTO"
                }
              }
            }
          }
        },
        "summary": "Percentage to price",
        "tags": [
          "IP Tokens"
        ]
      }
    },
    "/api/v1/assets": {
      "get": {
        "operationId": "AssetsController_getAssets",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "query",
            "description": "type of the asset, all, video, image",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": true,
            "in": "query",
            "description": "category of the asset, uploads, exports, ip-clips",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exported_by",
            "required": false,
            "in": "query",
            "description": "which product exported this asset, video-2-video or face-swap, etc...",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source_video",
            "required": false,
            "in": "query",
            "description": "source video id",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "skip number",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "description": "take number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsListResDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all assets",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/{id}": {
      "get": {
        "operationId": "AssetsController_getAsset",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "asset id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/relate-to-ip": {
      "post": {
        "operationId": "AssetsController_relateToIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelateToIpDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Relate an asset to an ip",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/rename": {
      "post": {
        "operationId": "AssetsController_renameAsset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetRenameReqDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Rename an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/uploadToken": {
      "post": {
        "description": "Get a upload token for s3 upload",
        "operationId": "AssetsController_uploadToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadTokenDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadTokenResDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an upload link",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/uploaded": {
      "post": {
        "description": "Call when assets was uploaded, to register the asset info",
        "operationId": "AssetsController_uploaded",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadedDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadedDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Register an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/assets/delete": {
      "post": {
        "operationId": "AssetsController_deleteAsset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an asset",
        "tags": [
          "Assets"
        ]
      }
    },
    "/api/v1/face-swap": {
      "get": {
        "operationId": "FaceSwapController_getList",
        "parameters": [
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get face swap list",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/face-swap/{id}": {
      "get": {
        "operationId": "FaceSwapController_getDetail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get face swap detail",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/face-swap/create": {
      "post": {
        "operationId": "FaceSwapController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Create a face swap",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/face-swap/cancel": {
      "post": {
        "operationId": "FaceSwapController_cancelVideo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapCancelParamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Cancel a face swap",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/face-swap/re-extract": {
      "post": {
        "operationId": "FaceSwapController_reExtractFace",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapReExtractDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Re-extract faces from video",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/face-swap/retry": {
      "post": {
        "operationId": "FaceSwapController_retry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapRetryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Retry a face swap when it failed",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/face-swap/re-swap": {
      "post": {
        "operationId": "FaceSwapController_reSwap",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapReSwapDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Re-swap faces if it not as expected",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/face-swap/swap": {
      "post": {
        "operationId": "FaceSwapController_swapFace",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "create a face swap job",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/face-swap/remove-face": {
      "post": {
        "operationId": "FaceSwapController_removeFace",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FaceSwapRemoveFaceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "remove a extracted face",
        "tags": [
          "AIGC Face Swap"
        ]
      }
    },
    "/api/v1/video-to-video/re-generate": {
      "post": {
        "operationId": "VideoToVideoController_reGeneratevideo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenerateParamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Re-generate a video if it not as expected",
        "tags": [
          "AIGC Video Animation"
        ]
      }
    },
    "/api/v1/video-to-video/retry": {
      "post": {
        "operationId": "VideoToVideoController_retryVideo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoRetryParamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Retry a video if it failed",
        "tags": [
          "AIGC Video Animation"
        ]
      }
    },
    "/api/v1/video-to-video/list": {
      "get": {
        "operationId": "VideoToVideoController_getVideoList",
        "parameters": [
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get video-to-video job list",
        "tags": [
          "AIGC Video Animation"
        ]
      }
    },
    "/api/v1/video-to-video/{videoId}": {
      "get": {
        "operationId": "VideoToVideoController_getCurrentVideo",
        "parameters": [
          {
            "name": "videoId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get video-to-video job detail",
        "tags": [
          "AIGC Video Animation"
        ]
      }
    },
    "/api/v1/video-to-video/generate": {
      "post": {
        "operationId": "VideoToVideoController_generateVideo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoGenerateParamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "create a video-to-video job",
        "tags": [
          "AIGC Video Animation"
        ]
      }
    },
    "/api/v1/video-to-video/cancel": {
      "post": {
        "operationId": "VideoToVideoController_cancelVideo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoCancelParamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Cancel a video-to-video job",
        "tags": [
          "AIGC Video Animation"
        ]
      }
    },
    "/api/v1/video-to-video/create-from-asset": {
      "post": {
        "operationId": "VideoToVideoController_createFromAsset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFromAssetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Create video convert job from asset",
        "tags": [
          "AIGC Video Animation"
        ]
      }
    },
    "/api/v1/video-to-video/stopGenerate": {
      "post": {
        "operationId": "VideoToVideoController_stopGenerateVideo",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoStopGenerateParamsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Stop a video-to-video job",
        "tags": [
          "AIGC Video Animation"
        ]
      }
    },
    "/api/v1/generate-video": {
      "get": {
        "operationId": "GenerateVideoController_getList",
        "parameters": [
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get generate-video job list",
        "tags": [
          "AIGC Video Generator"
        ]
      }
    },
    "/api/v1/generate-video/{id}": {
      "get": {
        "operationId": "GenerateVideoController_getDetail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateVideoDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get generate-video job detail",
        "tags": [
          "AIGC Video Generator"
        ]
      }
    },
    "/api/v1/generate-video/create": {
      "post": {
        "operationId": "GenerateVideoController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateVideoRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateVideoDetailDto"
                }
              }
            }
          }
        },
        "summary": "Create a generate-video job",
        "tags": [
          "AIGC Video Generator"
        ]
      }
    },
    "/api/v1/generate-video/re-generate": {
      "post": {
        "operationId": "GenerateVideoController_reGenerate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReGenerateVideoRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateVideoDetailDto"
                }
              }
            }
          }
        },
        "summary": "Re-generate a generate-video job if it not as expected",
        "tags": [
          "AIGC Video Generator"
        ]
      }
    },
    "/api/v1/generate-image": {
      "get": {
        "description": "Get a list of generate-image jobs",
        "operationId": "GenerateImageController_getList",
        "parameters": [
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get job list",
        "tags": [
          "AIGC Image Generator"
        ]
      }
    },
    "/api/v1/generate-image/ratios": {
      "get": {
        "operationId": "GenerateImageController_getSupportedRatios",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get supported ratios",
        "tags": [
          "AIGC Image Generator"
        ]
      }
    },
    "/api/v1/generate-image/{id}": {
      "get": {
        "description": "Get a generate-image job detail",
        "operationId": "GenerateImageController_getDetail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get job detail",
        "tags": [
          "AIGC Image Generator"
        ]
      }
    },
    "/api/v1/generate-image/create": {
      "post": {
        "description": "Create a generate-image job",
        "operationId": "GenerateImageController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateImageRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Create",
        "tags": [
          "AIGC Image Generator"
        ]
      }
    },
    "/api/v1/generate-image/re-generate": {
      "post": {
        "description": "Re-generate a generate-image job if it not as expected",
        "operationId": "GenerateImageController_reGenerate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReGenerateImageRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Re-generate",
        "tags": [
          "AIGC Image Generator"
        ]
      }
    },
    "/api/v1/ip-library": {
      "get": {
        "operationId": "IpLibraryController_get",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "tag of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "category of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "required": false,
            "in": "query",
            "description": "genre of the ip library, you can pass multiple genres by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "sort order, default sort field is created_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_field",
            "required": false,
            "in": "query",
            "description": "sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "required": false,
            "in": "query",
            "description": "owner of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "launched_to_giggle",
            "required": false,
            "in": "query",
            "description": "is launched to giggle",
            "schema": {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          },
          {
            "name": "is_top",
            "required": false,
            "in": "query",
            "description": "is top",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_public",
            "required": false,
            "in": "query",
            "description": "is public",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "children_levels",
            "required": false,
            "in": "query",
            "description": "children levels",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app-id",
            "required": false,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryListDto"
                }
              }
            }
          }
        },
        "summary": "Get list of ip libraries",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/my": {
      "get": {
        "operationId": "IpLibraryController_getMy",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "tag of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search keyword",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "category of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "required": false,
            "in": "query",
            "description": "genre of the ip library, you can pass multiple genres by comma",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "sort order, default sort field is created_at",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort_field",
            "required": false,
            "in": "query",
            "description": "sort field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "required": false,
            "in": "query",
            "description": "owner of the ip library",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "launched_to_giggle",
            "required": false,
            "in": "query",
            "description": "is launched to giggle",
            "schema": {
              "enum": [
                "true",
                "false"
              ],
              "type": "string"
            }
          },
          {
            "name": "is_top",
            "required": false,
            "in": "query",
            "description": "is top",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_public",
            "required": false,
            "in": "query",
            "description": "is public",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "children_levels",
            "required": false,
            "in": "query",
            "description": "children levels",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get my ip libraries",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/genres": {
      "get": {
        "operationId": "IpLibraryController_getGenres",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenreDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get video genres",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/territories": {
      "get": {
        "operationId": "IpLibraryController_getTerritories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TerritoryDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get territories",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/like": {
      "post": {
        "operationId": "IpLibraryController_likeIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Like an ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/unlike": {
      "post": {
        "operationId": "IpLibraryController_unlikeIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlikeIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Unlike an ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/available-parent-ips": {
      "get": {
        "operationId": "IpLibraryController_getAvailableParentIps",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableParentIpsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get available parent ips",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/my/{id}": {
      "get": {
        "operationId": "IpLibraryController_getMyDetail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detail of ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/set-visibility": {
      "post": {
        "operationId": "IpLibraryController_setIpVisibility",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetVisibilityDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Set visibility of ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/untokenize": {
      "post": {
        "operationId": "IpLibraryController_untokenize",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UntokenizeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Untokenize an ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/create-ip": {
      "post": {
        "description": "\nReturns SSE stream with progress updates and final result, \nsse event:\n\n**data structure:**\n`\n{\n  event: string,\n  data: {\n    message: string\n  } | number\n}\n`\n\n**event list:**\n- ip.data_validating\n\nthis event indicate the data is validating\n- ip.asset_processing\n\nthis event indicate the asset is processing\n- ip.video_uploading\n\nthis event indicate the video is uploading, at current step, data in `data` is the progress of video uploading\n- ip.ip_library_creating\n\nthis event indicate the ip library is creating\n- ip.push_ip_to_chain\n\nthis event indicate the ip is pushing to chain\n- ip.share_to_giggle\n  \nthis event indicate the ip is sharing to giggle, this event only exists when `share_to_giggle` is true in request body\n- asset.uploading\n  \nthis event indicate the asset of creating meme is uploading, at current step, data in `data` is the progress of asset uploading, this event only exists when `share_to_giggle` is true in request body\n- meme.creating\n\nthis event indicate the meme is creating, this event only exists when `share_to_giggle` is true in request body\n- meme.created\n\nthis event indicate the meme is created, this event only exists when `share_to_giggle` is true in request body\n- ip.update_token_data_on_chain\n\nthis event indicate the ip is updating token data which just created to chain, this event only exists when `share_to_giggle` is true in request body\n- ip.payment_processing\n\nthis event indicate the ip is processing payment, this event only exists when `share_to_giggle` is true in request body\n- ip.payment_confirmed\n\nthis event indicate the ip is confirmed payment, this event only exists when `share_to_giggle` is true in request body\n- ip.payment_refunded\n\nthis event indicate the ip is refunded payment, this event only exists when `share_to_giggle` is true in request body\n- ip.created\n\nthis event indicate the ip is created, and the data in `data` is the detail of ip\n\n- ip.warning\n\nthis event indicate the ip is created, but some warning occurs, this may ip token is created failed or ip token is registered failed, the data in `data` is the warning message\n\n**error event:**\n\nif error occurs, the event will be `error` and the data in `data` is the error message, subscriber will be completed.\ndata structure:\n\n`\nevent: error\nid: 2\ndata: some error message\n`\n\n",
        "operationId": "IpLibraryController_createIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/update-ip": {
      "post": {
        "description": "\nUpdate an existing ip, do not allow to update if ip is on chain or token info is already created.\nReturns SSE stream with progress updates and final result, \nsse event:\n\n**data structure:**\n`\n{\n  event: string,\n  data: {\n    message: string\n  } | number\n}\n`\n\n**event list:**\n- ip.data_validating\n\nthis event indicate the data is validating\n\n- ip.on_chain_updating\n\nthis event indicate the ip is updating on chain.\n\n- ip.updated\n\nthis event indicate the ip is updated, and the data in `data` is the detail of ip\n\n- ip.warning\n\nthis event indicate the ip is updated, but some warning occurs, this may ip token is created failed or ip token is registered failed, the data in `data` is the warning message\n\n**error event:**\n\nif error occurs, the event will be `error` and the data in `data` is the error message, subscriber will be completed.\ndata structure:\n\n`\nevent: error\nid: 2\ndata: some error message\n`\n\n",
        "operationId": "IpLibraryController_editIp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditIpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update ip",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/share-to-giggle": {
      "post": {
        "description": "\nReturns SSE stream with progress updates and final result, \nsse event:\n\n**data structure:**\n`\n{\n  event: string,\n  data: {\n    message: string\n  } | number\n}\n`\n\n**event list:**\n- ip.data_validating\n\nthis event indicate the data is validating\n\n- asset.uploading\n  \nthis event indicate the asset of creating meme is uploading, at current step, data in `data` is the progress of asset uploading.\n\n- meme.creating\n\nthis event indicate the meme is creating.\n\n- meme.created\n\nthis event indicate the meme is created.\n\n- ip.update_token_data_on_chain\n\nthis event indicate the ip is updating token data which just created to chain.\n\n- ip.payment_processing\n\nthis event indicate the ip is processing payment, this event only exists when `share_to_giggle` is true in request body\n\n- ip.payment_confirmed\n\nthis event indicate the ip is confirmed payment, this event only exists when `share_to_giggle` is true in request body\n\n- ip.payment_refunded\n\nthis event indicate the ip is refunded payment, this event only exists when `share_to_giggle` is true in request body\n\n- ip.shared\n\nthis event indicate the ip is shared, and the data in `data` is the detail of ip\n\n- ip.warning\n\nthis event indicate the ip is created, but some warning occurs, this may ip token is created failed or ip token is registered failed, the data in `data` is the warning message\n\n**error event:**\n\nif error occurs, the event will be `error` and the data in `data` is the error message, subscriber will be completed.\ndata structure:\n\n`\nevent: error\nid: 2\ndata: some error message\n`\n\n",
        "operationId": "IpLibraryController_shareToGiggle",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareToGiggleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSEMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Share an existing ip to giggle",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/{id}": {
      "get": {
        "operationId": "IpLibraryController_getDetail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get detail of ip library",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip-library/register-token": {
      "post": {
        "operationId": "IpLibraryController_registerToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Register token for an ip",
        "tags": [
          "IP Library"
        ]
      }
    },
    "/api/v1/ip/license/ips": {
      "get": {
        "operationId": "LicenseController_ipList",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "search",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_id",
            "required": false,
            "in": "query",
            "description": "ip id",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "103": {
            "description": ""
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseIpListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user purchased ips",
        "tags": [
          "License"
        ]
      }
    },
    "/api/v1/ip/license/purchase": {
      "post": {
        "operationId": "LicenseController_purchase",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreateDto"
              }
            }
          }
        },
        "responses": {
          "103": {
            "description": ""
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Purchase ip license",
        "tags": [
          "License"
        ]
      }
    },
    "/api/v1/ip/license/purchaseWithEvent": {
      "post": {
        "operationId": "LicenseController_purchaseWithEvent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreateDto"
              }
            }
          }
        },
        "responses": {
          "103": {
            "description": ""
          },
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLibraryDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Purchase ip license",
        "tags": [
          "License"
        ]
      }
    },
    "/api/v1/ip/announcement": {
      "post": {
        "operationId": "AnnouncementController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnouncementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create an announcement",
        "tags": [
          "Announcement"
        ]
      },
      "get": {
        "operationId": "AnnouncementController_listAnnouncements",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app_id",
            "required": false,
            "in": "query",
            "description": "App id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementListDto"
                }
              }
            }
          }
        },
        "summary": "Get announcement list",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/announcement/detail/{id}": {
      "get": {
        "operationId": "AnnouncementController_detail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get announcement detail",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/announcement/{ipId}": {
      "get": {
        "operationId": "AnnouncementController_listIpAnnouncements",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app_id",
            "required": false,
            "in": "query",
            "description": "App id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ipId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementListDto"
                }
              }
            }
          }
        },
        "summary": "Get announcement list by ip",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/announcement/update": {
      "post": {
        "operationId": "AnnouncementController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnouncementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementDetailDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an announcement",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/announcement/delete": {
      "post": {
        "operationId": "AnnouncementController_delete",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAnnouncementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAnnouncementResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an announcement",
        "tags": [
          "Announcement"
        ]
      }
    },
    "/api/v1/ip/comments": {
      "get": {
        "operationId": "CommentsController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "List comments by IP",
        "tags": [
          "Comments"
        ]
      },
      "post": {
        "operationId": "CommentsController_create",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Create a new comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/comments/{id}": {
      "get": {
        "operationId": "CommentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Get one comment by ID",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/comments/delete": {
      "post": {
        "operationId": "CommentsController_remove",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Delete a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/comments/like": {
      "post": {
        "operationId": "CommentsController_likeComment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LikeCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Like a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/comments/unlike": {
      "post": {
        "operationId": "CommentsController_unlikeComment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlikeCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Unlike a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/api/v1/ip/order/create-ip-order": {
      "post": {
        "operationId": "IpOrderController_createIpOrder",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIpOrderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Create an ip order",
        "tags": [
          "IP Order"
        ]
      }
    },
    "/api/v1/ip/order": {
      "get": {
        "operationId": "IpOrderController_getIpOrderList",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIpOrderListDto"
                }
              }
            }
          }
        },
        "summary": "Get ip order list",
        "tags": [
          "IP Order"
        ]
      }
    },
    "/api/v1/ip/order/{order_id}": {
      "get": {
        "operationId": "IpOrderController_checkIpOrder",
        "parameters": [
          {
            "name": "order_id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIpOrderDto"
                }
              }
            }
          }
        },
        "summary": "Check ip order",
        "tags": [
          "IP Order"
        ]
      }
    },
    "/api/v1/order/list": {
      "get": {
        "operationId": "OrderController_getOrderList",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "The status of the order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderListDto"
                }
              }
            }
          }
        },
        "summary": "List of user's orders",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/detail": {
      "get": {
        "operationId": "OrderController_getOrder",
        "parameters": [
          {
            "name": "order_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get an order by order id",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/order/create": {
      "post": {
        "operationId": "OrderController_createOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDetailDto"
                }
              }
            }
          }
        },
        "summary": "Create an order",
        "tags": [
          "Order"
        ]
      }
    },
    "/api/v1/app/list": {
      "get": {
        "operationId": "OpenAppController_getAppList",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "description": "page number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "required": true,
            "in": "query",
            "description": "page size",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppListDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get app list",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/info": {
      "get": {
        "operationId": "OpenAppController_getAppInfo",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "description": "App ID, please contact us to get the app id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "required": false,
            "in": "header",
            "description": "JWT Authorization, if set,this field is using to verify if user is admin of the app",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfoDto"
                }
              }
            }
          }
        },
        "summary": "Get app info",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/settings": {
      "get": {
        "operationId": "OpenAppController_getOpenAppSettings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Open-app settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAppSettingsDto"
                }
              }
            }
          }
        },
        "summary": "Get open-app settings",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/create": {
      "post": {
        "operationId": "OpenAppController_createApp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create app",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/preview": {
      "post": {
        "operationId": "OpenAppController_previewApp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfoDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Preview app",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/delete": {
      "post": {
        "operationId": "OpenAppController_deleteApp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAppDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete app",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/update-app": {
      "post": {
        "operationId": "OpenAppController_updateApp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update app",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/top-ip-list": {
      "get": {
        "operationId": "OpenAppController_getTopIpList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopIpSummaryDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get top IP list",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/request-creator": {
      "post": {
        "description": "Sends an application to become a creator on the platform with contact details and project ideas",
        "operationId": "OpenAppController_requestCreator",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCreatorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestCreatorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Request to become a creator on the platform",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/approve-creator": {
      "post": {
        "description": "Approves a creator application, enables IP creation permissions, and sends a confirmation email",
        "operationId": "OpenAppController_approveCreator",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveCreatorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creator approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApproveCreatorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve a creator application",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/lookup-by-subdomain/{subdomain}": {
      "get": {
        "operationId": "OpenAppController_lookupBySubdomain",
        "parameters": [
          {
            "name": "subdomain",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfoDto"
                }
              }
            }
          }
        },
        "summary": "Lookup app by subdomain",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/info/{appId}": {
      "get": {
        "description": "Get app info by app id",
        "operationId": "OpenAppController_getAppInfoByAppId",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authorization",
            "required": false,
            "in": "header",
            "description": "JWT Auth orization, if set,this field is using to verify if user is admin of the app",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppInfoDto"
                }
              }
            }
          }
        },
        "summary": "Get app info by app id",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/add-invite-email": {
      "post": {
        "operationId": "OpenAppController_addInviteEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddInviteEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invite email added successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add invite email",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/remove-invite-email": {
      "post": {
        "operationId": "OpenAppController_removeInviteEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveInviteEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invite email removed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove invite email",
        "tags": [
          "IP Portal"
        ]
      }
    },
    "/api/v1/app/auth/login": {
      "post": {
        "description": "this api is used to request login app",
        "operationId": "AuthController_login",
        "parameters": [
          {
            "name": "origin",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "request login app",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/app/auth/check-login-token": {
      "post": {
        "description": "this api is used to check login token",
        "operationId": "AuthController_checkToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckTokenDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckTokenResponseDto"
                }
              }
            }
          }
        },
        "summary": "check login token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/app/auth/get-bind-code": {
      "post": {
        "description": "this api is used to get bind code",
        "operationId": "AuthController_getBindCode",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBindCodeDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBindCodeResponseDto"
                }
              }
            }
          }
        },
        "summary": "get bind code",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/app/auth/confirm-bind-code": {
      "post": {
        "description": "this api is used to confirm binding an external app",
        "operationId": "AuthController_confirmBindApp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmBindDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmBindResponseDto"
                }
              }
            }
          }
        },
        "summary": "confirm bind app",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/v1/developer/widgets/create": {
      "post": {
        "operationId": "DeveloperController_createWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperWidgetCreateDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDetailDto"
                }
              }
            }
          }
        },
        "summary": "create a widget",
        "tags": [
          "Widgets-dev"
        ]
      }
    },
    "/api/v1/developer/widgets/update": {
      "post": {
        "operationId": "DeveloperController_updateWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperWidgetUpdateDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDetailDto"
                }
              }
            }
          }
        },
        "summary": "update a widget",
        "tags": [
          "Widgets-dev"
        ]
      }
    },
    "/api/v1/developer/widgets/delete": {
      "post": {
        "operationId": "DeveloperController_deleteWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeveloperWidgetDeleteDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperWidgetDeleteResponseDto"
                }
              }
            }
          }
        },
        "summary": "delete a widget",
        "tags": [
          "Widgets-dev"
        ]
      }
    },
    "/api/v1/developer/widgets": {
      "get": {
        "operationId": "DeveloperController_getWidgets",
        "parameters": [],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDetailDto"
                }
              }
            }
          }
        },
        "summary": "get all widgets",
        "tags": [
          "Widgets-dev"
        ]
      }
    },
    "/api/v1/developer/widgets/{tag}": {
      "get": {
        "operationId": "DeveloperController_getConfigs",
        "parameters": [
          {
            "name": "tag",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDetailDto"
                }
              }
            }
          }
        },
        "summary": "get configs for a widget",
        "tags": [
          "Widgets-dev"
        ]
      }
    },
    "/api/v1/link/create": {
      "post": {
        "description": "Create a short link you can share to anywhere, default is to a portal page.\n        The link redirect url is depends users token, if token is from a widget, the link will be to the widget in portal, you can specify the widget message when widget loaded.\n        ",
        "operationId": "LinkController_createLink",
        "parameters": [
          {
            "name": "app-id",
            "required": false,
            "in": "header",
            "description": "The app id of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkRequestDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLinkResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a short link to share.",
        "tags": [
          "Link"
        ]
      }
    },
    "/api/v1/link/{uniqueStr}": {
      "get": {
        "operationId": "LinkController_getLink",
        "parameters": [
          {
            "name": "uniqueStr",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkDetailDto"
                }
              }
            }
          }
        },
        "summary": "Get a link by unique string.",
        "tags": [
          "Link"
        ]
      }
    },
    "/api/v1/app/widgets": {
      "get": {
        "operationId": "WidgetsController_getWidgets",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclude",
            "required": false,
            "in": "query",
            "description": "exclude tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "type",
            "schema": {
              "enum": [
                "iframe",
                "system"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WidgetSummaryDto"
                  }
                }
              }
            }
          }
        },
        "summary": "get all widgets",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/my": {
      "get": {
        "operationId": "WidgetsController_getMyWidgets",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclude",
            "required": false,
            "in": "query",
            "description": "exclude tags",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "type",
            "schema": {
              "enum": [
                "iframe",
                "system"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WidgetSummaryDto"
                  }
                }
              }
            }
          }
        },
        "summary": "get all my widgets",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/getConfigs": {
      "get": {
        "operationId": "WidgetsController_getWidgetConfig",
        "parameters": [
          {
            "name": "widget_tag",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/"
                  }
                }
              }
            }
          }
        },
        "summary": "get a widget config",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/create": {
      "post": {
        "operationId": "WidgetsController_createWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWidgetDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "create a widget",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/getAccessToken": {
      "post": {
        "operationId": "WidgetsController_getAccessToken",
        "parameters": [
          {
            "name": "app-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAccessTokenDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccessTokenResponseDto"
                }
              }
            }
          }
        },
        "summary": "get access token for a widget",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/update": {
      "post": {
        "operationId": "WidgetsController_updateWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWidgetDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "update a widget",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/delete": {
      "post": {
        "operationId": "WidgetsController_deleteWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWidgetDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "delete a widget",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/applyConfigToApps": {
      "post": {
        "operationId": "WidgetsController_applyWidgetConfigToApps",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyWidgetConfigToAppsDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "apply a widget config to apps",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/unbindConfigFromApps": {
      "post": {
        "operationId": "WidgetsController_unbindWidgetConfigFromApps",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbindWidgetConfigFromAppsDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "unbind a widget config from apps",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/{tag}": {
      "get": {
        "operationId": "WidgetsController_getWidgetByTag",
        "parameters": [
          {
            "name": "tag",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "get a widget by tag",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/subscribe": {
      "post": {
        "operationId": "WidgetsController_subscribeWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeWidgetDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "subscribe a widget",
        "tags": [
          "Widgets"
        ]
      }
    },
    "/api/v1/app/widgets/unsubscribe": {
      "post": {
        "operationId": "WidgetsController_unsubscribeWidget",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnsubscribeWidgetDto"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponseDto"
                }
              }
            }
          }
        },
        "summary": "unsubscribe a widget",
        "tags": [
          "Widgets"
        ]
      }
    }
  },
  "info": {
    "title": "Giggle.Pro API Reference",
    "description": "This is the API reference for Giggle.Pro",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Summary",
      "description": "This API provides endpoints for managing IP libraries, including creation, retrieval, and validation of IP data."
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "in": "header",
        "name": "Authorization",
        "description": "JWT Authorization"
      }
    },
    "schemas": {
      "SubscriptionPlanDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the plan",
            "enum": [
              "none",
              "Free",
              "Starter",
              "Basic",
              "Premium",
              "Custom"
            ]
          },
          "period": {
            "type": "string",
            "description": "The period of the plan",
            "enum": [
              "monthly",
              "yearly"
            ]
          },
          "price": {
            "type": "number",
            "description": "The price of the plan"
          },
          "price_per_credit": {
            "type": "number",
            "description": "The price per credit of the plan, using to purchase external credits"
          },
          "price_id": {
            "type": "string",
            "description": "Stripe price id of the plan"
          },
          "credit_per_month": {
            "type": "number",
            "description": "The credits per month of the plan"
          },
          "video_convert_max_seconds": {
            "type": "number",
            "description": "The maximum seconds of animation convert of the plan"
          },
          "credit_consume_every_second": {
            "type": "number",
            "description": "The credits consume every second of the plan"
          },
          "face_swap_consume_every_second": {
            "type": "number",
            "description": "The credits consume every second of the plan"
          },
          "generate_video_consume_every_second": {
            "type": "number",
            "description": "The credits consume every second of the plan"
          },
          "generate_image_consume_per_image": {
            "type": "number",
            "description": "The credits consume per image of the plan"
          },
          "extra_info": {
            "type": "object",
            "description": "The rights of the plan",
            "required": [],
            "properties": {
              "max_animate_seconds": {
                "description": "The maximum seconds of animation convert of the plan",
                "type": "number"
              },
              "max_generate_videos": {
                "description": "The maximum seconds of generate videos of the plan",
                "type": "number"
              },
              "max_generate_images": {
                "description": "The maximum seconds of generate images of the plan",
                "type": "number"
              }
            }
          }
        },
        "required": [
          "name",
          "period",
          "price",
          "price_per_credit",
          "price_id",
          "credit_per_month",
          "video_convert_max_seconds",
          "credit_consume_every_second",
          "face_swap_consume_every_second",
          "generate_video_consume_every_second",
          "generate_image_consume_per_image"
        ]
      },
      "UserInfoDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "usernameShorted": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "credit": {
            "type": "number"
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "avatar": {
            "type": "string"
          },
          "invited_by": {
            "type": "string"
          },
          "agent_user": {
            "type": "string"
          },
          "subscription_info": {
            "$ref": "#/components/schemas/SubscriptionPlanDto"
          },
          "giggle_wallet_address": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "followers": {
            "type": "number"
          },
          "following": {
            "type": "number"
          },
          "app_id": {
            "type": "string"
          },
          "can_create_ip": {
            "type": "boolean"
          },
          "is_developer": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "widget_info": {
            "type": "object"
          }
        },
        "required": [
          "username",
          "password",
          "usernameShorted",
          "email",
          "refreshToken",
          "credit",
          "emailConfirmed",
          "avatar",
          "invited_by",
          "agent_user",
          "subscription_info",
          "giggle_wallet_address",
          "description",
          "followers",
          "following",
          "app_id",
          "can_create_ip",
          "is_developer",
          "permissions",
          "widget_info"
        ]
      },
      "WalletCoinSummaryDto": {
        "type": "object",
        "properties": {
          "holding_num": {
            "type": "number",
            "description": "holding number"
          },
          "formated_holding_num": {
            "type": "string",
            "description": "formated holding number"
          },
          "holding_amount": {
            "type": "number",
            "description": "holding amount"
          },
          "formated_holding_amount": {
            "type": "string",
            "description": "formated holding amount"
          },
          "price": {
            "type": "number",
            "description": "price"
          },
          "formated_price": {
            "type": "string",
            "description": "formated price"
          },
          "symbol": {
            "type": "string",
            "description": "symbol"
          },
          "name": {
            "type": "string",
            "description": "name"
          },
          "mint": {
            "type": "string",
            "description": "mint"
          },
          "cover_url": {
            "type": "string",
            "description": "cover image url"
          },
          "change5m": {
            "type": "string",
            "description": "5m change of the ip token"
          },
          "change1h": {
            "type": "string",
            "description": "1h change of the ip token"
          },
          "change24h": {
            "type": "string",
            "description": "24h change of the ip token"
          }
        },
        "required": [
          "holding_num",
          "formated_holding_num",
          "holding_amount",
          "formated_holding_amount",
          "price",
          "formated_price",
          "symbol",
          "name",
          "mint",
          "cover_url",
          "change5m",
          "change1h",
          "change24h"
        ]
      },
      "UserWalletDetailDto": {
        "type": "object",
        "properties": {
          "addr": {
            "type": "string",
            "description": "user wallet address"
          },
          "total_balance": {
            "type": "number",
            "description": "total balance"
          },
          "formated_total_balance": {
            "type": "string",
            "description": "formated total balance"
          },
          "ip_total_market_cap": {
            "type": "number",
            "description": "ip total market cap"
          },
          "formated_market_cap": {
            "type": "string",
            "description": "formated market cap"
          },
          "list": {
            "description": "list of ip tokens",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletCoinSummaryDto"
            }
          },
          "page": {
            "type": "number",
            "description": "page"
          },
          "page_size": {
            "type": "number",
            "description": "page size"
          },
          "ip_license_incomes": {
            "type": "number",
            "description": "ip income"
          },
          "total_balance_change_24h": {
            "type": "number",
            "description": "total balance change 24h"
          }
        },
        "required": [
          "addr",
          "total_balance",
          "formated_total_balance",
          "ip_total_market_cap",
          "formated_market_cap",
          "list",
          "page",
          "page_size",
          "ip_license_incomes",
          "total_balance_change_24h"
        ]
      },
      "UpdateProfileReqDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "description"
        ]
      },
      "UserFollowDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "user of the user to follow"
          }
        },
        "required": [
          "user"
        ]
      },
      "UserUnFollowDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "user of the user to follow"
          }
        },
        "required": [
          "user"
        ]
      },
      "LoginWithCodeReqDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "code"
        ]
      },
      "LoginResponseDTO": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "GetIpTokenListResponseDto": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "description": "count of ip tokens"
          },
          "data": {
            "description": "list of ip tokens",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "count",
          "data"
        ]
      },
      "TradeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of the trade",
            "enum": [
              "buy",
              "sell"
            ],
            "example": "buy"
          },
          "token": {
            "type": "string",
            "description": "token address of the trade"
          },
          "amount": {
            "type": "number",
            "description": "amount of the trade"
          }
        },
        "required": [
          "type",
          "token",
          "amount"
        ]
      },
      "TradeResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "status of the trade, 1: pending, 2: success, 3: failed",
            "enum": [
              1,
              2,
              3
            ]
          },
          "sign": {
            "description": "sign of the trade",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "status",
          "sign"
        ]
      },
      "PercentageToCreditsDTO": {
        "type": "object",
        "properties": {
          "usdc": {
            "type": "number",
            "description": "usdt to be consumed",
            "example": 100
          },
          "sols": {
            "type": "number",
            "description": "required solana number when buy this percentage",
            "example": 0.008
          },
          "giggle_tokens": {
            "type": "number",
            "description": "giggle tokens",
            "example": 100000
          }
        },
        "required": [
          "usdc",
          "sols",
          "giggle_tokens"
        ]
      },
      "AssetsDtoWithUrl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the asset"
          },
          "name": {
            "type": "string",
            "description": "name of the asset, not unique"
          },
          "type": {
            "type": "string",
            "description": "type of the asset, all, video, image"
          },
          "category": {
            "type": "string",
            "description": "category of the asset, uploads, exports, ip-clips"
          },
          "path": {
            "type": "string",
            "description": "path of the asset in s3"
          },
          "path_optimized": {
            "type": "object",
            "description": "optimized path of the asset in s3"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "created time of the asset"
          },
          "thumbnail": {
            "type": "string",
            "description": "thumbnail of the asset"
          },
          "exported_by": {
            "type": "string",
            "description": "which product exported this asset, video-2-video or face-swap, etc..."
          },
          "source_video": {
            "type": "number",
            "description": "Source video id, only available for category exports and type video, this indicates the id of the video that was exported to create this asset"
          },
          "asset_info": {
            "type": "object",
            "description": "info of the asset, normaly video or image metadata"
          },
          "signed_url": {
            "type": "string",
            "description": "signed url of the asset, for browser to access"
          },
          "download_url": {
            "type": "string",
            "description": "signed url of the asset, for download"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "category",
          "path",
          "created_at",
          "thumbnail",
          "exported_by",
          "source_video",
          "asset_info",
          "signed_url",
          "download_url"
        ]
      },
      "AssetsListResDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetsDtoWithUrl"
            }
          },
          "total": {
            "type": "number",
            "description": "total number of assets"
          }
        },
        "required": [
          "data",
          "total"
        ]
      },
      "OnChainDetailDto": {
        "type": "object",
        "properties": {
          "ipAddr": {
            "type": "string",
            "description": "ip address of the ip library"
          },
          "signature": {
            "type": "string",
            "description": "signature of the ip library"
          }
        },
        "required": [
          "ipAddr",
          "signature"
        ]
      },
      "CreateIpTokenGiggleResponseDto": {
        "type": "object",
        "properties": {
          "user_address": {
            "type": "string",
            "description": "user address on chain"
          },
          "mint": {
            "type": "string",
            "description": "token mint address"
          },
          "bonding_curve": {
            "type": "string",
            "description": "bonding curve address"
          },
          "bonding_curve_progress": {
            "type": "number",
            "description": "bonding curve progress"
          },
          "name": {
            "type": "string",
            "description": "name of the ip token"
          },
          "symbol": {
            "type": "string",
            "description": "symbol of the ip token"
          },
          "price": {
            "type": "string",
            "description": "current price of the ip token"
          },
          "market_cap": {
            "type": "string",
            "description": "market cap of the ip token"
          },
          "circulating_supply": {
            "type": "string",
            "description": "circulating supply of the ip token"
          },
          "total_supply": {
            "type": "string",
            "description": "total supply of the ip token"
          },
          "cover_url": {
            "type": "string",
            "description": "cover url of the ip token"
          },
          "file_url": {
            "type": "string",
            "description": "file url of the ip token"
          },
          "twitter": {
            "type": "string",
            "description": "twitter of the ip token"
          },
          "telegram": {
            "type": "string",
            "description": "telegram of the ip token"
          },
          "website": {
            "type": "string",
            "description": "website of the ip token"
          },
          "visitLink": {
            "type": "string",
            "description": "visit link of the ip token"
          },
          "status": {
            "type": "string",
            "description": "status of the ip token"
          },
          "signature": {
            "type": "string",
            "description": "signature of the ip token"
          },
          "description": {
            "type": "string",
            "description": "description of the ip token"
          },
          "metadata_uri": {
            "type": "string",
            "description": "metadata uri of the ip token"
          },
          "sequels_amount": {
            "type": "string",
            "description": "sequels amount of the ip token"
          },
          "credit_price": {
            "type": "number",
            "description": "credit price of the ip token, this field is only used for license purchase"
          },
          "created_at": {
            "type": "string",
            "description": "created at of the ip token"
          },
          "updated_at": {
            "type": "string",
            "description": "updated at of the ip token"
          },
          "change5m": {
            "type": "string",
            "description": "5m change of the ip token"
          },
          "change1h": {
            "type": "string",
            "description": "1h change of the ip token"
          },
          "change24h": {
            "type": "string",
            "description": "24h change of the ip token"
          }
        },
        "required": [
          "user_address",
          "mint",
          "bonding_curve",
          "bonding_curve_progress",
          "name",
          "symbol",
          "price",
          "market_cap",
          "circulating_supply",
          "total_supply",
          "cover_url",
          "file_url",
          "twitter",
          "telegram",
          "website",
          "visitLink",
          "status",
          "signature",
          "description",
          "metadata_uri",
          "sequels_amount",
          "credit_price",
          "created_at",
          "updated_at"
        ]
      },
      "IpSignatureClipMetadataDto": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "size of the signature clip"
          }
        },
        "required": [
          "size"
        ]
      },
      "IpSignatureClipDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the signature clip"
          },
          "name": {
            "type": "string",
            "description": "name of the signature clip"
          },
          "description": {
            "type": "string",
            "description": "description of the signature clip"
          },
          "object_key": {
            "type": "string",
            "description": "object key of the signature clip"
          },
          "ipfs_hash": {
            "type": "string",
            "description": "ipfs hash of the signature clip"
          },
          "thumbnail": {
            "type": "string",
            "description": "thumbnail of the signature clip"
          },
          "video_url": {
            "type": "string",
            "description": "video url of the signature clip"
          },
          "video_info": {
            "description": "video metadata of the signature clip",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpSignatureClipMetadataDto"
              }
            ]
          },
          "asset_id": {
            "type": "number",
            "description": "asset id of the signature clip"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "object_key",
          "ipfs_hash",
          "thumbnail",
          "video_url",
          "video_info",
          "asset_id"
        ]
      },
      "LicenseDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the license"
          }
        },
        "required": [
          "name"
        ]
      },
      "TerritoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the territory"
          },
          "value": {
            "type": "string",
            "description": "value of the territory"
          },
          "children": {
            "description": "children of the territory",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerritoryDto"
            }
          }
        },
        "required": [
          "name",
          "value",
          "children"
        ]
      },
      "RevenueDistributionDto": {
        "type": "object",
        "properties": {
          "licensor": {
            "type": "number",
            "description": "licensor percentage of the revenue distribution"
          },
          "platform": {
            "type": "number",
            "description": "platform percentage of the revenue distribution"
          },
          "community": {
            "type": "number",
            "description": "community percentage of the revenue distribution"
          },
          "treasury": {
            "type": "number",
            "description": "treasury percentage of the revenue distribution"
          }
        },
        "required": [
          "licensor",
          "platform",
          "community",
          "treasury"
        ]
      },
      "GovernanceTypeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the governance type",
            "enum": [
              "governance_right",
              "exclusive_nft_access",
              "game_film_royalties",
              "ip_revenue_share",
              "fan_participation_ip_expansion"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "IpPeriodDto": {
        "type": "object",
        "properties": {
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "start date of the ip library"
          },
          "end_date": {
            "format": "date-time",
            "type": "string",
            "description": "end date of the ip library"
          }
        }
      },
      "AuthorizationSettingsDto": {
        "type": "object",
        "properties": {
          "can_purchase": {
            "type": "string",
            "description": "is license of the ip library can be purchased by users",
            "enum": [
              "open-access",
              "restricted"
            ]
          },
          "license": {
            "description": "licenses of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseDto"
            }
          },
          "territory": {
            "description": "territory of the authorization settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerritoryDto"
            }
          },
          "revenue_distribution": {
            "description": "revenue distribution of the authorization settings, all the numbers must be between 0 and 100 and the sum must be 100",
            "allOf": [
              {
                "$ref": "#/components/schemas/RevenueDistributionDto"
              }
            ]
          },
          "governance_types": {
            "description": "governance types of the authorization settings",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GovernanceTypeDto"
            }
          },
          "long_term_license": {
            "type": "boolean",
            "description": "is long term license"
          },
          "valid_date": {
            "description": "valid date of the ip library, this field is required if long_term_license is false",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpPeriodDto"
              }
            ]
          },
          "license_price": {
            "type": "number",
            "description": "price of the license"
          },
          "notes": {
            "type": "string",
            "description": "notes of the authorization settings"
          }
        },
        "required": [
          "can_purchase",
          "license",
          "revenue_distribution",
          "governance_types",
          "long_term_license",
          "valid_date",
          "license_price"
        ]
      },
      "GenreDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the genre"
          },
          "value": {
            "type": "string",
            "description": "value of the genre"
          }
        },
        "required": [
          "name"
        ]
      },
      "IpSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "likes": {
            "type": "number",
            "description": "likes of the ip library"
          },
          "comments": {
            "type": "number",
            "description": "comments of the ip library"
          },
          "is_user_liked": {
            "type": "boolean",
            "description": "is liked by the user"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "cover asset id of the ip library"
          },
          "cover_image": {
            "type": "string",
            "description": "cover images of the ip library"
          },
          "cover_hash": {
            "type": "string",
            "description": "cover ipfs hash of the ip library"
          },
          "on_chain_detail": {
            "description": "on chain detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnChainDetailDto"
              }
            ]
          },
          "can_purchase": {
            "type": "boolean",
            "description": "can purchase"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines"
          },
          "governance_right": {
            "type": "boolean",
            "description": "is governance right"
          },
          "creator_id": {
            "type": "string",
            "description": "creator id of the ip library"
          },
          "creator": {
            "type": "string",
            "description": "creator of the ip library"
          },
          "creator_description": {
            "type": "string",
            "description": "creator description of the ip library"
          },
          "creator_avatar": {
            "type": "string",
            "description": "creator avatar of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "is public"
          },
          "is_top": {
            "type": "boolean",
            "description": "is top"
          },
          "ip_level": {
            "type": "number",
            "description": "ip level, currently we support 3 level ip, so the value is 1, 2 or 3",
            "enum": [
              1,
              2,
              3
            ]
          },
          "creator_followers": {
            "type": "number",
            "description": "creator followers of the ip library"
          },
          "token_info": {
            "description": "token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ip_signature_clips": {
            "description": "signature clips of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSignatureClipDto"
            }
          },
          "authorization_settings": {
            "description": "authorization settings of the ip library",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationSettingsDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "description",
          "likes",
          "comments",
          "is_user_liked",
          "cover_asset_id",
          "cover_image",
          "cover_hash",
          "on_chain_detail",
          "can_purchase",
          "creation_guide_lines",
          "governance_right",
          "creator_id",
          "creator",
          "creator_description",
          "creator_avatar",
          "is_public",
          "is_top",
          "ip_level",
          "creator_followers",
          "token_info",
          "ip_signature_clips",
          "authorization_settings"
        ]
      },
      "IpLibraryDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "likes": {
            "type": "number",
            "description": "likes of the ip library"
          },
          "comments": {
            "type": "number",
            "description": "comments of the ip library"
          },
          "is_user_liked": {
            "type": "boolean",
            "description": "is liked by the user"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "cover asset id of the ip library"
          },
          "cover_image": {
            "type": "string",
            "description": "cover images of the ip library"
          },
          "cover_hash": {
            "type": "string",
            "description": "cover ipfs hash of the ip library"
          },
          "on_chain_detail": {
            "description": "on chain detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnChainDetailDto"
              }
            ]
          },
          "can_purchase": {
            "type": "boolean",
            "description": "can purchase"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines"
          },
          "governance_right": {
            "type": "boolean",
            "description": "is governance right"
          },
          "creator_id": {
            "type": "string",
            "description": "creator id of the ip library"
          },
          "creator": {
            "type": "string",
            "description": "creator of the ip library"
          },
          "creator_description": {
            "type": "string",
            "description": "creator description of the ip library"
          },
          "creator_avatar": {
            "type": "string",
            "description": "creator avatar of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "is public"
          },
          "is_top": {
            "type": "boolean",
            "description": "is top"
          },
          "ip_level": {
            "type": "number",
            "description": "ip level, currently we support 3 level ip, so the value is 1, 2 or 3",
            "enum": [
              1,
              2,
              3
            ]
          },
          "creator_followers": {
            "type": "number",
            "description": "creator followers of the ip library"
          },
          "token_info": {
            "description": "token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ip_signature_clips": {
            "description": "signature clips of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSignatureClipDto"
            }
          },
          "authorization_settings": {
            "description": "authorization settings of the ip library",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationSettingsDto"
              }
            ]
          },
          "genre": {
            "description": "genre of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "parent_ip_info": {
            "description": "parent ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryDto"
            }
          },
          "child_ip_info": {
            "description": "child ip library, only return 100 items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryDto"
            }
          },
          "on_chain_status": {
            "type": "string",
            "description": "on chain status"
          },
          "extra_info": {
            "type": "object",
            "description": "extra info"
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "description",
          "likes",
          "comments",
          "is_user_liked",
          "cover_asset_id",
          "cover_image",
          "cover_hash",
          "on_chain_detail",
          "can_purchase",
          "creation_guide_lines",
          "governance_right",
          "creator_id",
          "creator",
          "creator_description",
          "creator_avatar",
          "is_public",
          "is_top",
          "ip_level",
          "creator_followers",
          "token_info",
          "ip_signature_clips",
          "authorization_settings",
          "genre",
          "parent_ip_info",
          "child_ip_info",
          "on_chain_status",
          "extra_info"
        ]
      },
      "AssetDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the asset"
          },
          "name": {
            "type": "string",
            "description": "name of the asset, not unique"
          },
          "type": {
            "type": "string",
            "description": "type of the asset, all, video, image"
          },
          "category": {
            "type": "string",
            "description": "category of the asset, uploads, exports, ip-clips"
          },
          "path": {
            "type": "string",
            "description": "path of the asset in s3"
          },
          "path_optimized": {
            "type": "object",
            "description": "optimized path of the asset in s3"
          },
          "user": {
            "type": "string",
            "description": "belong to which user"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "created time of the asset"
          },
          "thumbnail": {
            "type": "string",
            "description": "thumbnail of the asset"
          },
          "exported_by": {
            "type": "string",
            "description": "which product exported this asset, video-2-video or face-swap, etc..."
          },
          "source_video": {
            "type": "number",
            "description": "Source video id, only available for category exports and type video, this indicates the id of the video that was exported to create this asset"
          },
          "asset_info": {
            "type": "object",
            "description": "info of the asset, normaly video or image metadata"
          },
          "exported_by_task_id": {
            "type": "string",
            "description": "task id of the asset, only available for internal use, this indicates the id of the task that was exported to create this asset"
          },
          "ipfs_key": {
            "type": "string",
            "description": "ipfs key of the asset"
          },
          "signed_url": {
            "type": "string",
            "description": "signed url of the asset, for browser to access"
          },
          "optimized_urls": {
            "type": "object",
            "description": "optimized urls of the asset"
          },
          "download_url": {
            "type": "string",
            "description": "signed url of the asset, for download"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "thumbnail url of the asset"
          },
          "related_ip_libraries": {
            "description": "related ip libraries of the asset",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpLibraryDetailDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "category",
          "path",
          "user",
          "created_at",
          "thumbnail",
          "exported_by",
          "source_video",
          "asset_info",
          "exported_by_task_id",
          "ipfs_key",
          "signed_url",
          "optimized_urls",
          "download_url",
          "thumbnail_url",
          "related_ip_libraries"
        ]
      },
      "RelateToIpDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "number",
            "description": "id of the ip"
          },
          "asset_id": {
            "type": "number",
            "description": "id of the asset"
          }
        },
        "required": [
          "ip_id",
          "asset_id"
        ]
      },
      "AssetRenameReqDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the asset"
          },
          "name": {
            "type": "string",
            "description": "new name of the asset"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "AssetsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the asset"
          },
          "name": {
            "type": "string",
            "description": "name of the asset, not unique"
          },
          "type": {
            "type": "string",
            "description": "type of the asset, all, video, image"
          },
          "category": {
            "type": "string",
            "description": "category of the asset, uploads, exports, ip-clips"
          },
          "path": {
            "type": "string",
            "description": "path of the asset in s3"
          },
          "path_optimized": {
            "type": "object",
            "description": "optimized path of the asset in s3"
          },
          "user": {
            "type": "string",
            "description": "belong to which user"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "created time of the asset"
          },
          "thumbnail": {
            "type": "string",
            "description": "thumbnail of the asset"
          },
          "exported_by": {
            "type": "string",
            "description": "which product exported this asset, video-2-video or face-swap, etc..."
          },
          "source_video": {
            "type": "number",
            "description": "Source video id, only available for category exports and type video, this indicates the id of the video that was exported to create this asset"
          },
          "asset_info": {
            "type": "object",
            "description": "info of the asset, normaly video or image metadata"
          },
          "exported_by_task_id": {
            "type": "string",
            "description": "task id of the asset, only available for internal use, this indicates the id of the task that was exported to create this asset"
          },
          "ipfs_key": {
            "type": "string",
            "description": "ipfs key of the asset"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "category",
          "path",
          "user",
          "created_at",
          "thumbnail",
          "exported_by",
          "source_video",
          "asset_info",
          "exported_by_task_id",
          "ipfs_key"
        ]
      },
      "UploadTokenDto": {
        "type": "object",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "name of the file, currently only support mp4"
          },
          "file_type": {
            "type": "string",
            "description": "type of the file"
          }
        },
        "required": [
          "file_name",
          "file_type"
        ]
      },
      "UploadTokenResDto": {
        "type": "object",
        "properties": {
          "object_key": {
            "type": "string",
            "description": "object key of the asset in s3"
          },
          "signed_url": {
            "type": "string",
            "description": "signed url of the asset, for upload"
          }
        },
        "required": [
          "object_key",
          "signed_url"
        ]
      },
      "UploadedDto": {
        "type": "object",
        "properties": {
          "object_key": {
            "type": "string",
            "description": "object key of the asset in s3"
          },
          "name": {
            "type": "string",
            "description": "name of the asset"
          },
          "source_video": {
            "type": "number",
            "description": "source video id"
          },
          "category": {
            "type": "string",
            "description": "category of the asset"
          },
          "optimize": {
            "type": "boolean",
            "description": "optimize video to 360p"
          },
          "exported_by": {
            "type": "string",
            "description": "which product exported this asset, video-2-video or face-swap, etc..."
          }
        },
        "required": [
          "object_key",
          "name"
        ]
      },
      "DeleteAssetDto": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "number",
            "description": "id of the asset"
          }
        },
        "required": [
          "asset_id"
        ]
      },
      "FaceSwapCreateDto": {
        "type": "object",
        "properties": {
          "from_asset_id": {
            "type": "number",
            "description": "from asset id"
          }
        },
        "required": [
          "from_asset_id"
        ]
      },
      "FaceSwapCancelParamsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "face swap id"
          }
        },
        "required": [
          "id"
        ]
      },
      "FaceSwapExtractingParamsDto": {
        "type": "object",
        "properties": {
          "face_score": {
            "type": "number",
            "description": "face score"
          },
          "face_distance": {
            "type": "number",
            "description": "face distance"
          }
        },
        "required": [
          "face_score",
          "face_distance"
        ]
      },
      "FaceSwapReExtractDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "face swap id"
          },
          "extracting_params": {
            "description": "extracting params",
            "allOf": [
              {
                "$ref": "#/components/schemas/FaceSwapExtractingParamsDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "extracting_params"
        ]
      },
      "FaceSwapRetryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "face swap id"
          }
        },
        "required": [
          "id"
        ]
      },
      "FaceSwapReSwapDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "face swap id"
          }
        },
        "required": [
          "id"
        ]
      },
      "FaceSwapRequestDto": {
        "type": "object",
        "properties": {
          "video_id": {
            "type": "number",
            "description": "video id to swap"
          },
          "swap_params": {
            "description": "params to swap",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "video_id",
          "swap_params"
        ]
      },
      "FaceSwapRemoveFaceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "face id"
          }
        },
        "required": [
          "id"
        ]
      },
      "VideoGenerateParamsDto": {
        "type": "object",
        "properties": {}
      },
      "VideoRetryParamsDto": {
        "type": "object",
        "properties": {}
      },
      "VideoCancelParamsDto": {
        "type": "object",
        "properties": {}
      },
      "CreateFromAssetDto": {
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "number",
            "description": "Asset ID"
          }
        },
        "required": [
          "asset_id"
        ]
      },
      "VideoStopGenerateParamsDto": {
        "type": "object",
        "properties": {}
      },
      "GenerateVideoParamsDto": {
        "type": "object",
        "properties": {
          "ratio": {
            "type": "string",
            "enum": [
              "16:9",
              "9:16",
              "1:1"
            ]
          }
        },
        "required": [
          "ratio"
        ]
      },
      "GenerateVideoDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "current_status": {
            "type": "string",
            "enum": [
              "uploaded",
              "generating",
              "completed",
              "failed",
              "cancelled"
            ]
          },
          "progress": {
            "type": "number"
          },
          "model": {
            "type": "string"
          },
          "object_key": {
            "type": "string"
          },
          "object_url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "prompt": {
            "type": "string"
          },
          "generate_params": {
            "$ref": "#/components/schemas/GenerateVideoParamsDto"
          },
          "generate_video_result": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "current_status",
          "progress",
          "model",
          "object_key",
          "object_url",
          "type",
          "prompt",
          "generate_params",
          "generate_video_result"
        ]
      },
      "GenerateVideoRequestDto": {
        "type": "object",
        "properties": {
          "from_asset_id": {
            "type": "number",
            "description": "from asset id"
          },
          "prompt": {
            "type": "string",
            "description": "prompt"
          },
          "ratio": {
            "type": "string",
            "description": "ratio"
          },
          "model": {
            "type": "string",
            "description": "model"
          },
          "seconds": {
            "type": "number",
            "description": "seconds"
          }
        },
        "required": [
          "from_asset_id",
          "prompt",
          "ratio",
          "model",
          "seconds"
        ]
      },
      "CancelGenerateVideoRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "generate video id"
          }
        },
        "required": [
          "id"
        ]
      },
      "ReGenerateVideoRequestDto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "prompt"
          },
          "ratio": {
            "type": "string",
            "description": "ratio"
          },
          "model": {
            "type": "string",
            "description": "model"
          },
          "id": {
            "type": "number",
            "description": "generate video id"
          }
        },
        "required": [
          "prompt",
          "ratio",
          "model",
          "id"
        ]
      },
      "GenerateImageRequestDto": {
        "type": "object",
        "properties": {
          "from_asset_id": {
            "type": "number",
            "description": "from asset id"
          },
          "prompt": {
            "type": "string",
            "description": "prompt"
          },
          "ratio": {
            "type": "string",
            "description": "ratio"
          },
          "count": {
            "type": "number",
            "description": "count"
          },
          "seconds": {
            "type": "number",
            "description": "seconds"
          }
        },
        "required": [
          "from_asset_id",
          "prompt",
          "ratio",
          "count",
          "seconds"
        ]
      },
      "ReGenerateImageRequestDto": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "prompt"
          },
          "ratio": {
            "type": "string",
            "description": "ratio"
          },
          "count": {
            "type": "number",
            "description": "count"
          },
          "id": {
            "type": "number",
            "description": "generate image id"
          }
        },
        "required": [
          "prompt",
          "ratio",
          "count",
          "id"
        ]
      },
      "IpSummaryWithChildDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "likes": {
            "type": "number",
            "description": "likes of the ip library"
          },
          "comments": {
            "type": "number",
            "description": "comments of the ip library"
          },
          "is_user_liked": {
            "type": "boolean",
            "description": "is liked by the user"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "cover asset id of the ip library"
          },
          "cover_image": {
            "type": "string",
            "description": "cover images of the ip library"
          },
          "cover_hash": {
            "type": "string",
            "description": "cover ipfs hash of the ip library"
          },
          "on_chain_detail": {
            "description": "on chain detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnChainDetailDto"
              }
            ]
          },
          "can_purchase": {
            "type": "boolean",
            "description": "can purchase"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines"
          },
          "governance_right": {
            "type": "boolean",
            "description": "is governance right"
          },
          "creator_id": {
            "type": "string",
            "description": "creator id of the ip library"
          },
          "creator": {
            "type": "string",
            "description": "creator of the ip library"
          },
          "creator_description": {
            "type": "string",
            "description": "creator description of the ip library"
          },
          "creator_avatar": {
            "type": "string",
            "description": "creator avatar of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "is public"
          },
          "is_top": {
            "type": "boolean",
            "description": "is top"
          },
          "ip_level": {
            "type": "number",
            "description": "ip level, currently we support 3 level ip, so the value is 1, 2 or 3",
            "enum": [
              1,
              2,
              3
            ]
          },
          "creator_followers": {
            "type": "number",
            "description": "creator followers of the ip library"
          },
          "token_info": {
            "description": "token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ip_signature_clips": {
            "description": "signature clips of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSignatureClipDto"
            }
          },
          "authorization_settings": {
            "description": "authorization settings of the ip library",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationSettingsDto"
              }
            ]
          },
          "child_ip_info": {
            "description": "child ip library, only return 100 items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "description",
          "likes",
          "comments",
          "is_user_liked",
          "cover_asset_id",
          "cover_image",
          "cover_hash",
          "on_chain_detail",
          "can_purchase",
          "creation_guide_lines",
          "governance_right",
          "creator_id",
          "creator",
          "creator_description",
          "creator_avatar",
          "is_public",
          "is_top",
          "ip_level",
          "creator_followers",
          "token_info",
          "ip_signature_clips",
          "authorization_settings",
          "child_ip_info"
        ]
      },
      "IpLibraryListDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "ip libraries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSummaryWithChildDto"
            }
          },
          "count": {
            "type": "number",
            "description": "total count of ip libraries"
          }
        },
        "required": [
          "data",
          "count"
        ]
      },
      "LikeIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "UnlikeIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "AvailableParentIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "children": {
            "description": "children of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableParentIpDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "children"
        ]
      },
      "PurchasedIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          }
        },
        "required": [
          "id",
          "name",
          "ticker"
        ]
      },
      "AvailableParentIpsDto": {
        "type": "object",
        "properties": {
          "owned": {
            "description": "owned ip libraries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableParentIpDto"
            }
          },
          "purchased": {
            "description": "purchased ip libraries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchasedIpDto"
            }
          }
        },
        "required": [
          "owned",
          "purchased"
        ]
      },
      "SetVisibilityDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "visibility of the ip library"
          }
        },
        "required": [
          "id",
          "is_public"
        ]
      },
      "UntokenizeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateIpDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "genre": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "image_id": {
            "type": "number",
            "description": "asset id of the ip cover image"
          },
          "video_id": {
            "type": "number",
            "description": "id of the video"
          },
          "share_to_giggle": {
            "type": "boolean",
            "description": "share this ip to giggle"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines of the ip library"
          },
          "chain_name": {
            "type": "string",
            "description": "chain name of the ip library, currently only support solana",
            "default": "solana"
          },
          "authorization_settings": {
            "description": "authorization settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationSettingsDto"
              }
            ]
          },
          "parent_ip_library_id": {
            "type": "number",
            "description": "id of the parent ip library"
          },
          "twitter": {
            "type": "string",
            "description": "more options"
          },
          "website": {
            "type": "string",
            "description": "website of the ip library"
          },
          "telegram": {
            "type": "string",
            "description": "telegram of the ip library"
          },
          "buy_amount": {
            "type": "number",
            "description": "buy **PERCENTAGE** of ip tokens to self using usdc when share to giggle"
          }
        },
        "required": [
          "name",
          "ticker",
          "description",
          "image_id",
          "share_to_giggle",
          "authorization_settings"
        ]
      },
      "EditIpDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "genre": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "image_id": {
            "type": "number",
            "description": "asset id of the ip cover image"
          },
          "video_id": {
            "type": "number",
            "description": "id of the video"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines of the ip library"
          },
          "authorization_settings": {
            "description": "authorization settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationSettingsDto"
              }
            ]
          },
          "twitter": {
            "type": "string",
            "description": "more options"
          },
          "website": {
            "type": "string",
            "description": "website of the ip library"
          },
          "telegram": {
            "type": "string",
            "description": "telegram of the ip library"
          },
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "description",
          "image_id",
          "authorization_settings",
          "id"
        ]
      },
      "SSEMessage": {
        "type": "object",
        "properties": {}
      },
      "ShareToGiggleDto": {
        "type": "object",
        "properties": {
          "buy_amount": {
            "type": "number",
            "description": "buy **PERCENTAGE** of ip tokens to self using usdc when share to giggle"
          },
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "RegisterTokenDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          }
        },
        "required": [
          "id"
        ]
      },
      "LicenseIpDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "likes": {
            "type": "number",
            "description": "likes of the ip library"
          },
          "comments": {
            "type": "number",
            "description": "comments of the ip library"
          },
          "is_user_liked": {
            "type": "boolean",
            "description": "is liked by the user"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "cover asset id of the ip library"
          },
          "cover_image": {
            "type": "string",
            "description": "cover images of the ip library"
          },
          "cover_hash": {
            "type": "string",
            "description": "cover ipfs hash of the ip library"
          },
          "on_chain_detail": {
            "description": "on chain detail",
            "allOf": [
              {
                "$ref": "#/components/schemas/OnChainDetailDto"
              }
            ]
          },
          "can_purchase": {
            "type": "boolean",
            "description": "can purchase"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines"
          },
          "governance_right": {
            "type": "boolean",
            "description": "is governance right"
          },
          "creator_id": {
            "type": "string",
            "description": "creator id of the ip library"
          },
          "creator": {
            "type": "string",
            "description": "creator of the ip library"
          },
          "creator_description": {
            "type": "string",
            "description": "creator description of the ip library"
          },
          "creator_avatar": {
            "type": "string",
            "description": "creator avatar of the ip library"
          },
          "is_public": {
            "type": "boolean",
            "description": "is public"
          },
          "is_top": {
            "type": "boolean",
            "description": "is top"
          },
          "ip_level": {
            "type": "number",
            "description": "ip level, currently we support 3 level ip, so the value is 1, 2 or 3",
            "enum": [
              1,
              2,
              3
            ]
          },
          "creator_followers": {
            "type": "number",
            "description": "creator followers of the ip library"
          },
          "token_info": {
            "description": "token info",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpTokenGiggleResponseDto"
              }
            ]
          },
          "ip_signature_clips": {
            "description": "signature clips of the ip library",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpSignatureClipDto"
            }
          },
          "authorization_settings": {
            "description": "authorization settings of the ip library",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationSettingsDto"
              }
            ]
          },
          "ip_id": {
            "type": "number",
            "description": "IP id"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity"
          },
          "remain_quantity": {
            "type": "number",
            "description": "Remain quantity"
          }
        },
        "required": [
          "id",
          "name",
          "ticker",
          "description",
          "likes",
          "comments",
          "is_user_liked",
          "cover_asset_id",
          "cover_image",
          "cover_hash",
          "on_chain_detail",
          "can_purchase",
          "creation_guide_lines",
          "governance_right",
          "creator_id",
          "creator",
          "creator_description",
          "creator_avatar",
          "is_public",
          "is_top",
          "ip_level",
          "creator_followers",
          "token_info",
          "ip_signature_clips",
          "authorization_settings",
          "ip_id",
          "quantity",
          "remain_quantity"
        ]
      },
      "LicenseIpListDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseIpDto"
            }
          },
          "count": {
            "type": "number",
            "description": "total count of ip libraries"
          }
        },
        "required": [
          "data",
          "count"
        ]
      },
      "OrderCreateDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "number",
            "description": "IP id"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity"
          }
        },
        "required": [
          "ip_id",
          "quantity"
        ]
      },
      "CreateAnnouncementDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "number",
            "description": "Ip id"
          },
          "title": {
            "type": "string",
            "description": "Title of the announcement"
          },
          "description": {
            "type": "string",
            "description": "Content of the announcement"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "Cover asset id"
          },
          "video_asset_id": {
            "type": "number",
            "description": "Video asset id"
          }
        },
        "required": [
          "ip_id",
          "title",
          "description"
        ]
      },
      "AnnouncementDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id"
          },
          "ip_id": {
            "type": "number",
            "description": "Ip id"
          },
          "title": {
            "type": "string",
            "description": "Title of the announcement"
          },
          "description": {
            "type": "string",
            "description": "Content of the announcement"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "Cover asset id"
          },
          "video_asset_id": {
            "type": "number",
            "description": "Video asset id"
          },
          "creator": {
            "type": "string",
            "description": "Creator"
          },
          "cover_key": {
            "type": "string",
            "description": "Cover key"
          },
          "video_key": {
            "type": "string",
            "description": "Video key"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Created at"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Updated at"
          },
          "cover_url": {
            "type": "string",
            "description": "Cover url"
          },
          "video_url": {
            "type": "string",
            "description": "Video url"
          }
        },
        "required": [
          "id",
          "ip_id",
          "title",
          "description",
          "creator",
          "created_at",
          "updated_at"
        ]
      },
      "AnnouncementListDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Announcement list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnnouncementDetailDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of announcements"
          }
        },
        "required": [
          "data",
          "total"
        ]
      },
      "UpdateAnnouncementDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id"
          },
          "title": {
            "type": "string",
            "description": "Title of the announcement"
          },
          "description": {
            "type": "string",
            "description": "Content of the announcement"
          },
          "cover_asset_id": {
            "type": "number",
            "description": "Cover asset id"
          },
          "video_asset_id": {
            "type": "number",
            "description": "Video asset id"
          }
        },
        "required": [
          "id",
          "title",
          "description"
        ]
      },
      "DeleteAnnouncementDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id"
          }
        },
        "required": [
          "id"
        ]
      },
      "DeleteAnnouncementResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success"
          }
        },
        "required": [
          "success"
        ]
      },
      "CreateCommentDto": {
        "type": "object",
        "properties": {
          "ip_id": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "reply_post_id": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": [
          "ip_id",
          "content"
        ]
      },
      "DeleteCommentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "LikeCommentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "UnlikeCommentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateIpOrderDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          },
          "description": {
            "type": "string",
            "description": "description of the ip library"
          },
          "genre": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenreDto"
            }
          },
          "image_id": {
            "type": "number",
            "description": "asset id of the ip cover image"
          },
          "video_id": {
            "type": "number",
            "description": "id of the video"
          },
          "share_to_giggle": {
            "type": "boolean",
            "description": "share this ip to giggle"
          },
          "creation_guide_lines": {
            "type": "string",
            "description": "creation guide lines of the ip library"
          },
          "chain_name": {
            "type": "string",
            "description": "chain name of the ip library, currently only support solana",
            "default": "solana"
          },
          "authorization_settings": {
            "description": "authorization settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorizationSettingsDto"
              }
            ]
          },
          "parent_ip_library_id": {
            "type": "number",
            "description": "id of the parent ip library"
          },
          "twitter": {
            "type": "string",
            "description": "more options"
          },
          "website": {
            "type": "string",
            "description": "website of the ip library"
          },
          "telegram": {
            "type": "string",
            "description": "telegram of the ip library"
          },
          "buy_amount": {
            "type": "number",
            "description": "buy **PERCENTAGE** of ip tokens to self using usdc when share to giggle"
          },
          "redirect_url": {
            "type": "string",
            "description": "redirect url if order is successful"
          }
        },
        "required": [
          "name",
          "ticker",
          "description",
          "image_id",
          "share_to_giggle",
          "authorization_settings",
          "redirect_url"
        ]
      },
      "OrderDetailDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The order id"
          },
          "description": {
            "type": "string",
            "description": "The description of the order"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the order"
          },
          "owner": {
            "type": "string",
            "description": "The owner of the order"
          },
          "widget_tag": {
            "type": "string",
            "description": "The widget tag of the order created by"
          },
          "app_id": {
            "type": "string",
            "description": "The app id of the order created by"
          },
          "current_status": {
            "type": "string",
            "description": "The current status of the order"
          },
          "paid_method": {
            "type": "string",
            "description": "The paid method of the order"
          },
          "related_reward_id": {
            "type": "number",
            "description": "The related reward pool id of the order, note: this field may be require if we finish our economic model"
          },
          "rewards_model_snapshot": {
            "type": "object",
            "description": "The rewards model snapshot of the order"
          },
          "supported_payment_method": {
            "description": "The supported payment method of the order",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "redirect_url": {
            "type": "string",
            "description": "The redirect url after order is paid"
          },
          "paid_time": {
            "format": "date-time",
            "type": "string",
            "description": "The paid time of the order"
          },
          "expire_time": {
            "format": "date-time",
            "type": "string",
            "description": "The expire time of the order, default is 15 minutes"
          },
          "cancelled_time": {
            "format": "date-time",
            "type": "string",
            "description": "The cancelled time of the order"
          },
          "cancelled_detail": {
            "type": "object",
            "description": "The cancelled detail of the order"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The created time of the order"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The updated time of the order"
          },
          "order_url": {
            "type": "string",
            "description": "The url of order to pay or check the order status"
          }
        },
        "required": [
          "order_id",
          "amount",
          "owner",
          "current_status",
          "paid_method",
          "rewards_model_snapshot",
          "supported_payment_method",
          "redirect_url",
          "paid_time",
          "expire_time",
          "cancelled_time",
          "cancelled_detail",
          "created_at",
          "updated_at",
          "order_url"
        ]
      },
      "CheckIpOrderDto": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "The id of the order"
          },
          "creation_data": {
            "description": "The creation data of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIpDto"
              }
            ]
          },
          "ip_create_status": {
            "type": "string",
            "description": "The status of the order",
            "enum": [
              "pending",
              "creating",
              "created",
              "failed"
            ]
          },
          "order_info": {
            "description": "The info of the order",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderDetailDto"
              }
            ]
          }
        },
        "required": [
          "order_id",
          "creation_data",
          "ip_create_status",
          "order_info"
        ]
      },
      "CheckIpOrderListDto": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "The total number of the orders"
          },
          "orders": {
            "description": "The list of the orders",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckIpOrderDto"
            }
          }
        },
        "required": [
          "total",
          "orders"
        ]
      },
      "OrderListDto": {
        "type": "object",
        "properties": {
          "orders": {
            "description": "The list of orders",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "number",
            "description": "The total number of orders"
          }
        },
        "required": [
          "orders",
          "total"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "The amount of the order, only accept integer, 100 means $1.00, min is 1($0.01)"
          },
          "description": {
            "type": "string",
            "description": "The description of the order"
          },
          "related_reward_id": {
            "type": "number",
            "description": "The related reward pool id of the order, note: this field may be require if we finish our economic model"
          },
          "redirect_url": {
            "type": "string",
            "description": "The redirect url after order is paid"
          },
          "callback_url": {
            "type": "string",
            "description": "The callback url of the order, this url will be called when the order is paid or refunded or cancelled"
          }
        },
        "required": [
          "amount"
        ]
      },
      "AppListDto": {
        "type": "object",
        "properties": {}
      },
      "AppInfoDto": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "App ID"
          },
          "app_name": {
            "type": "string",
            "description": "App Name"
          },
          "description": {
            "type": "string",
            "description": "App Description"
          },
          "user_info": {
            "description": "User Info",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UserInfoDTO"
              }
            ]
          },
          "ip_info": {
            "description": "IP Info",
            "allOf": [
              {
                "$ref": "#/components/schemas/IpLibraryDetailDto"
              }
            ]
          },
          "is_admin": {
            "type": "boolean",
            "description": "Is Admin"
          },
          "usdc_mint": {
            "type": "string",
            "description": "USDC Mint"
          },
          "sub_domain": {
            "type": "string",
            "description": "Sub Domain"
          },
          "style_name": {
            "type": "string",
            "description": "Style Name"
          },
          "radius": {
            "type": "string",
            "description": "Radius"
          },
          "configs": {
            "type": "object",
            "description": "App configs, you can pass any configs you want"
          },
          "menus": {
            "description": "App menus",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "kline_url": {
            "type": "string",
            "description": "Kline URL"
          },
          "widgets": {
            "description": "Widgets",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "app_id",
          "user_info",
          "ip_info",
          "is_admin",
          "usdc_mint",
          "sub_domain",
          "style_name",
          "radius",
          "menus",
          "kline_url",
          "widgets"
        ]
      },
      "OpenAppSettingsDto": {
        "type": "object",
        "properties": {
          "usdc_mint": {
            "type": "string",
            "description": "USDC Mint"
          },
          "kline_url": {
            "type": "string",
            "description": "Kline URL"
          },
          "custom_sub_domain": {
            "type": "string",
            "description": "Custom Sub Domain"
          }
        },
        "required": [
          "usdc_mint",
          "kline_url",
          "custom_sub_domain"
        ]
      },
      "CreateAppDto": {
        "type": "object",
        "properties": {
          "sub_domain": {
            "type": "string",
            "description": "Sub Domain"
          },
          "style_name": {
            "type": "string",
            "description": "Style Name"
          },
          "radius": {
            "type": "string",
            "description": "Radius"
          },
          "configs": {
            "type": "object",
            "description": "App configs, you can pass any configs you want"
          },
          "menus": {
            "description": "App menus",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "widgets": {
            "description": "Widgets",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "ip_id": {
            "type": "number",
            "description": "IP ID, this ip must be shared to giggle and have no parent ip and ip owner is the same as the app owner"
          }
        },
        "required": [
          "sub_domain",
          "style_name",
          "radius",
          "menus",
          "widgets",
          "ip_id"
        ]
      },
      "DeleteAppDto": {
        "type": "object",
        "properties": {
          "app_id": {
            "type": "string",
            "description": "App ID"
          }
        },
        "required": [
          "app_id"
        ]
      },
      "UpdateAppDto": {
        "type": "object",
        "properties": {
          "sub_domain": {
            "type": "string",
            "description": "Sub Domain"
          },
          "style_name": {
            "type": "string",
            "description": "Style Name"
          },
          "radius": {
            "type": "string",
            "description": "Radius"
          },
          "configs": {
            "type": "object",
            "description": "App configs, you can pass any configs you want"
          },
          "menus": {
            "description": "App menus",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "widgets": {
            "description": "Widgets",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "app_id": {
            "type": "string",
            "description": "App ID"
          },
          "ip_id": {
            "type": "number",
            "description": "IP ID"
          }
        },
        "required": [
          "sub_domain",
          "style_name",
          "radius",
          "menus",
          "widgets",
          "app_id",
          "ip_id"
        ]
      },
      "TopIpSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "id of the ip library"
          },
          "name": {
            "type": "string",
            "description": "name of the ip library"
          },
          "ticker": {
            "type": "string",
            "description": "ticker of the ip library"
          }
        },
        "required": [
          "id",
          "name",
          "ticker"
        ]
      },
      "RequestCreatorDto": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "description": "Full name of the requester",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email of the requester",
            "example": "johndoe@example.com"
          },
          "company": {
            "type": "string",
            "description": "Company name",
            "example": "Example Inc."
          },
          "website": {
            "type": "string",
            "description": "Website URL",
            "example": "https://example.com"
          },
          "social_media": {
            "type": "string",
            "description": "Social media links (comma separated)",
            "example": "https://twitter.com/example, https://linkedin.com/in/example"
          },
          "description": {
            "type": "string",
            "description": "Description of the request or project ideas",
            "example": "I would like to create apps related to digital art and NFTs..."
          },
          "invited_user_email": {
            "type": "string",
            "description": "Invited user email",
            "example": "johndoe@example.com"
          }
        },
        "required": [
          "full_name",
          "email",
          "description"
        ]
      },
      "RequestCreatorResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message to display to the user",
            "example": "Your request has been sent to the creator"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "ApproveCreatorDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the creator to approve",
            "example": "johndoe@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "ApproveCreatorResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the request was successful",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Message to display to the user",
            "example": "Creator has been approved successfully"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "AddInviteEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Invite email, this email will be used to invite users to create app permission",
            "example": "johndoe@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "RemoveInviteEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Invite email, this email will be used to invite users to create app permission",
            "example": "johndoe@example.com"
          }
        },
        "required": [
          "email"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email"
          },
          "timestamp": {
            "type": "number",
            "description": "Timestamp"
          },
          "app_id": {
            "type": "string",
            "description": "App id"
          },
          "sign": {
            "type": "string",
            "description": "Signature"
          }
        },
        "required": [
          "email",
          "timestamp",
          "app_id",
          "sign"
        ]
      },
      "LoginResponseDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token"
          }
        },
        "required": [
          "token"
        ]
      },
      "CheckTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token"
          }
        },
        "required": [
          "token"
        ]
      },
      "CheckTokenResponseDto": {
        "type": "object",
        "properties": {
          "is_bind": {
            "type": "boolean",
            "description": "Is bind app"
          },
          "access_token": {
            "type": "string",
            "description": "Access token"
          },
          "host": {
            "type": "string",
            "description": "Host"
          },
          "email": {
            "type": "string",
            "description": "Email"
          }
        },
        "required": [
          "is_bind",
          "access_token",
          "host",
          "email"
        ]
      },
      "GetBindCodeDto": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host"
          },
          "email": {
            "type": "string",
            "description": "Email"
          },
          "app_id": {
            "type": "string",
            "description": "App id"
          }
        },
        "required": [
          "host",
          "email",
          "app_id"
        ]
      },
      "GetBindCodeResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success"
          },
          "message": {
            "type": "string",
            "description": "Message"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "ConfirmBindDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email"
          },
          "code": {
            "type": "string",
            "description": "Code"
          },
          "app_id": {
            "type": "string",
            "description": "App id"
          },
          "host": {
            "type": "string",
            "description": "Host"
          }
        },
        "required": [
          "email",
          "code",
          "app_id",
          "host"
        ]
      },
      "ConfirmBindResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success"
          },
          "access_token": {
            "type": "string",
            "description": "Access token"
          }
        },
        "required": [
          "success",
          "access_token"
        ]
      },
      "DeveloperWidgetCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the widget",
            "example": "My Widget"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the widget",
            "example": "This is a widget"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget",
            "example": "This is a widget"
          },
          "category": {
            "type": "string",
            "description": "The category of the widget",
            "example": "My Widget"
          },
          "widget_url": {
            "type": "string",
            "description": "The URL of the widget",
            "example": "http://localhost:4290/create"
          },
          "management_url": {
            "type": "string",
            "description": "The URL of the widget management",
            "example": "http://localhost:4290/management"
          },
          "repository_url": {
            "type": "string",
            "description": "The URL of the widget repository",
            "example": "https://github.com/my-widget"
          },
          "is_private": {
            "type": "boolean",
            "description": "Whether the widget is private",
            "example": false
          },
          "test_users": {
            "description": "The test users of the widget, max 10 users",
            "example": [
              "test1@giggle.pro",
              "test2@giggle.pro"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "summary",
          "description",
          "category",
          "widget_url",
          "management_url",
          "repository_url",
          "is_private",
          "test_users"
        ]
      },
      "WidgetSettingsDto": {
        "type": "object",
        "properties": {
          "widget_tag": {
            "type": "string",
            "description": "widget tag"
          },
          "management_url": {
            "type": "string",
            "description": "management url"
          },
          "widget_url": {
            "type": "string",
            "description": "widget url"
          },
          "metadata": {
            "type": "object",
            "description": "metadata"
          },
          "repository_url": {
            "type": "string",
            "description": "repository url"
          },
          "permissions": {
            "type": "string",
            "description": "permissions",
            "enum": [
              "read_ip",
              "manage_ip",
              "read_portal",
              "manage_portal",
              "get_user_info",
              "manage_wallet"
            ]
          },
          "type": {
            "type": "string",
            "description": "type",
            "enum": [
              "iframe",
              "system"
            ]
          }
        },
        "required": [
          "widget_tag",
          "management_url",
          "widget_url",
          "metadata",
          "repository_url",
          "permissions",
          "type"
        ]
      },
      "AuthorInfoDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "widget author username"
          },
          "avatar": {
            "type": "string",
            "description": "widget author avatar"
          }
        },
        "required": [
          "username",
          "avatar"
        ]
      },
      "WidgetDetailDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "name": {
            "type": "string",
            "description": "widget name"
          },
          "summary": {
            "type": "string",
            "description": "widget summary"
          },
          "pricing": {
            "type": "object",
            "description": "widget pricing"
          },
          "settings": {
            "description": "widget settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetSettingsDto"
              }
            ]
          },
          "is_featured": {
            "type": "boolean",
            "description": "widget is featured"
          },
          "is_new": {
            "type": "boolean",
            "description": "widget is new"
          },
          "is_official": {
            "type": "boolean",
            "description": "widget is official"
          },
          "category": {
            "type": "string",
            "description": "widget category"
          },
          "icon": {
            "type": "string",
            "description": "widget icon"
          },
          "description": {
            "type": "string",
            "description": "widget description"
          },
          "coming_soon": {
            "type": "boolean",
            "description": "widget coming soon"
          },
          "priority": {
            "type": "number",
            "description": "widget priority"
          },
          "subscribers": {
            "type": "number",
            "description": "widget subscribers"
          },
          "is_subscribed": {
            "type": "boolean",
            "description": "widget is subscribed"
          },
          "author_info": {
            "description": "widget author info",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorInfoDto"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "widget created at"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "widget updated at"
          },
          "test_users": {
            "description": "widget test users",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tag",
          "name",
          "settings",
          "is_featured",
          "is_new",
          "is_official",
          "category",
          "icon",
          "description",
          "coming_soon",
          "priority",
          "subscribers",
          "is_subscribed",
          "author_info",
          "created_at",
          "updated_at",
          "test_users"
        ]
      },
      "DeveloperWidgetUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the widget",
            "example": "My Widget"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the widget",
            "example": "This is a widget"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget",
            "example": "This is a widget"
          },
          "category": {
            "type": "string",
            "description": "The category of the widget",
            "example": "My Widget"
          },
          "widget_url": {
            "type": "string",
            "description": "The URL of the widget",
            "example": "http://localhost:4290/create"
          },
          "management_url": {
            "type": "string",
            "description": "The URL of the widget management",
            "example": "http://localhost:4290/management"
          },
          "repository_url": {
            "type": "string",
            "description": "The URL of the widget repository",
            "example": "https://github.com/my-widget"
          },
          "is_private": {
            "type": "boolean",
            "description": "Whether the widget is private",
            "example": false
          },
          "test_users": {
            "description": "The test users of the widget, max 10 users",
            "example": [
              "test1@giggle.pro",
              "test2@giggle.pro"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tag": {
            "type": "string",
            "description": "The tag of the widget",
            "example": "my-widget"
          }
        },
        "required": [
          "name",
          "summary",
          "description",
          "category",
          "widget_url",
          "management_url",
          "repository_url",
          "is_private",
          "test_users",
          "tag"
        ]
      },
      "DeveloperWidgetDeleteDto": {
        "type": "object",
        "properties": {}
      },
      "DeveloperWidgetDeleteResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the widget deletion",
            "example": "success"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateLinkRequestDto": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "The link of the share, if target is link"
          },
          "widget_message": {
            "type": "object",
            "description": "The message of the share, if target is widget"
          }
        }
      },
      "CreateLinkResponseDto": {
        "type": "object",
        "properties": {
          "link_id": {
            "type": "string",
            "description": "The id of the link"
          },
          "link_url": {
            "type": "string",
            "description": "The url of the link"
          }
        },
        "required": [
          "link_id",
          "link_url"
        ]
      },
      "LinkDetailDto": {
        "type": "object",
        "properties": {
          "link_id": {
            "type": "string",
            "description": "The id of the link"
          },
          "link_url": {
            "type": "string",
            "description": "The url of the link"
          },
          "creator": {
            "type": "object",
            "description": "The creator of the link",
            "properties": {
              "username": {
                "type": "string"
              },
              "avatar": {
                "type": "string"
              }
            }
          },
          "redirect_to_widget": {
            "type": "string",
            "description": "The widget tag of the link"
          },
          "widget_message": {
            "type": "object",
            "description": "The widget message of the link"
          },
          "redirect_to_link": {
            "type": "string",
            "description": "The link of the link"
          },
          "app_id": {
            "type": "string",
            "description": "The app id of the link"
          },
          "app_info": {
            "description": "The app info of the link",
            "allOf": [
              {
                "$ref": "#/components/schemas/AppInfoDto"
              }
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The created at of the link"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The updated at of the link"
          }
        },
        "required": [
          "link_id",
          "link_url",
          "creator",
          "redirect_to_widget",
          "widget_message",
          "redirect_to_link",
          "app_id",
          "app_info",
          "created_at",
          "updated_at"
        ]
      },
      "WidgetSummaryDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "name": {
            "type": "string",
            "description": "widget name"
          },
          "summary": {
            "type": "string",
            "description": "widget summary"
          },
          "pricing": {
            "type": "object",
            "description": "widget pricing"
          },
          "settings": {
            "description": "widget settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetSettingsDto"
              }
            ]
          },
          "is_featured": {
            "type": "boolean",
            "description": "widget is featured"
          },
          "is_new": {
            "type": "boolean",
            "description": "widget is new"
          },
          "is_official": {
            "type": "boolean",
            "description": "widget is official"
          },
          "category": {
            "type": "string",
            "description": "widget category"
          },
          "icon": {
            "type": "string",
            "description": "widget icon"
          },
          "description": {
            "type": "string",
            "description": "widget description"
          },
          "coming_soon": {
            "type": "boolean",
            "description": "widget coming soon"
          },
          "priority": {
            "type": "number",
            "description": "widget priority"
          },
          "subscribers": {
            "type": "number",
            "description": "widget subscribers"
          },
          "is_subscribed": {
            "type": "boolean",
            "description": "widget is subscribed"
          },
          "author_info": {
            "description": "widget author info",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorInfoDto"
              }
            ]
          }
        },
        "required": [
          "tag",
          "name",
          "settings",
          "is_featured",
          "is_new",
          "is_official",
          "category",
          "icon",
          "description",
          "coming_soon",
          "priority",
          "subscribers",
          "is_subscribed",
          "author_info"
        ]
      },
      "CreateWidgetDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "name": {
            "type": "string",
            "description": "widget name"
          },
          "summary": {
            "type": "string",
            "description": "widget summary"
          },
          "pricing": {
            "type": "object",
            "description": "widget pricing"
          },
          "settings": {
            "description": "widget settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetSettingsDto"
              }
            ]
          },
          "is_featured": {
            "type": "boolean",
            "description": "widget is featured"
          },
          "is_new": {
            "type": "boolean",
            "description": "widget is new"
          },
          "is_official": {
            "type": "boolean",
            "description": "widget is official"
          },
          "category": {
            "type": "string",
            "description": "widget category"
          },
          "author": {
            "type": "string",
            "description": "widget author"
          },
          "icon": {
            "type": "string",
            "description": "widget icon"
          },
          "description": {
            "type": "string",
            "description": "widget description"
          },
          "coming_soon": {
            "type": "boolean",
            "description": "widget coming soon"
          },
          "priority": {
            "type": "number",
            "description": "widget priority"
          }
        },
        "required": [
          "tag",
          "name",
          "settings",
          "is_featured",
          "is_new",
          "is_official",
          "category",
          "author",
          "icon",
          "description",
          "coming_soon",
          "priority"
        ]
      },
      "GetAccessTokenDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          }
        },
        "required": [
          "tag"
        ]
      },
      "GetAccessTokenResponseDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "access token"
          }
        },
        "required": [
          "access_token"
        ]
      },
      "UpdateWidgetDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "name": {
            "type": "string",
            "description": "widget name"
          },
          "summary": {
            "type": "string",
            "description": "widget summary"
          },
          "pricing": {
            "type": "object",
            "description": "widget pricing"
          },
          "settings": {
            "description": "widget settings",
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetSettingsDto"
              }
            ]
          },
          "is_featured": {
            "type": "boolean",
            "description": "widget is featured"
          },
          "is_new": {
            "type": "boolean",
            "description": "widget is new"
          },
          "is_official": {
            "type": "boolean",
            "description": "widget is official"
          },
          "category": {
            "type": "string",
            "description": "widget category"
          },
          "author": {
            "type": "string",
            "description": "widget author"
          },
          "icon": {
            "type": "string",
            "description": "widget icon"
          },
          "description": {
            "type": "string",
            "description": "widget description"
          },
          "coming_soon": {
            "type": "boolean",
            "description": "widget coming soon"
          },
          "priority": {
            "type": "number",
            "description": "widget priority"
          }
        }
      },
      "DeleteWidgetDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          }
        },
        "required": [
          "tag"
        ]
      },
      "ApplyWidgetConfigToAppsDto": {
        "type": "object",
        "properties": {
          "public": {
            "type": "object",
            "description": "public configuration for widget"
          },
          "private": {
            "type": "object",
            "description": "private configuration for widget"
          },
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "app_id": {
            "type": "string",
            "description": "app id"
          },
          "enabled": {
            "type": "boolean",
            "description": "enabled"
          }
        },
        "required": [
          "public",
          "private",
          "tag",
          "app_id"
        ]
      },
      "UnbindWidgetConfigFromAppsDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "app_id": {
            "type": "string",
            "description": "app id"
          }
        },
        "required": [
          "tag",
          "app_id"
        ]
      },
      "SubscribeWidgetDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          },
          "publicConfig": {
            "type": "object",
            "description": "public configuration for widget"
          },
          "privateConfig": {
            "type": "object",
            "description": "private configuration for widget"
          }
        },
        "required": [
          "tag"
        ]
      },
      "UnsubscribeWidgetDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "widget tag"
          }
        },
        "required": [
          "tag"
        ]
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "📚 IP Management",
      "tags": [
        "IP Library",
        "IP Order",
        "Announcement",
        "Comments",
        "Link"
      ]
    },
    {
      "name": "🧑‍💼 Account",
      "tags": [
        "Profile",
        "Auth"
      ]
    },
    {
      "name": "💰 Payment",
      "tags": [
        "Order"
      ]
    },
    {
      "name": "🌐 Web3",
      "tags": [
        "IP Tokens",
        "Web3 Tools"
      ]
    },
    {
      "name": "🏠 Portals",
      "tags": [
        "IP Portal"
      ]
    },
    {
      "name": "🧩 Widgets",
      "tags": [
        "Widgets"
      ]
    },
    {
      "name": "🔧 Developer Center",
      "tags": [
        "Widgets-dev"
      ]
    }
  ]
}